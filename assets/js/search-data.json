{
  
    
        "post0": {
            "title": "fastcore: An Underrated Python Library",
            "content": ". Background . I recently embarked on a journey to sharpen my python skills: I wanted to learn advanced patterns, idioms, and techniques. I started with reading books on advanced Python, however, the information didn&#39;t seem to stick without having somewhere to apply it. I also wanted the ability to ask questions from an expert while I was learning -- which is an arrangement that is hard to find! That&#39;s when it occurred to me: What if I could find an open source project that has fairly advanced python code and write documentation and tests? I made a bet that if I did this it would force me to learn everything very deeply, and the maintainers would be appreciative of my work and be willing to answer my questions. . And that&#39;s exactly what I did over the past month! I&#39;m pleased to report that it has been the most efficient learning experience I&#39;ve ever experienced. I&#39;ve discovered that writing documentation forced me to deeply understand not just what the code does but also why the code works the way it does, and to explore edge cases while writing tests. Most importantly, I was able to ask questions when I was stuck, and maintainers were willing to devote extra time knowing that their mentorship was in service of making their code more accessible! It turns out the library I choose, fastcore is some of the most fascinating Python I have ever encountered as its purpose and goals are fairly unique. . For the uninitiated, fastcore is a library on top of which many fast.ai projects are built on. Most importantly, fastcore extends the python programming language and strives to eliminate boilerplate and add useful functionality for common tasks. In this blog post, I&#39;m going to highlight some of my favorite tools that fastcore provides, rather than sharing what I learned about python. My goal is to pique your interest in this library, and hopefully motivate you to check out the documentation after you are done to learn more! . Why fastcore is interesting . Get exposed to ideas from other languages without leaving python: I’ve always heard that it is beneficial to learn other languages in order to become a better programmer. From a pragmatic point of view, I’ve found it difficult to learn other languages because I could never use them at work. Fastcore extends python to include patterns found in languages as diverse as Julia, Ruby and Haskell. Now that I understand these tools I am motivated to learn other languages. | You get a new set of pragmatic tools: fastcore includes utilities that will allow you to write more concise expressive code, and perhaps solve new problems. | Learn more about the Python programming language: Because fastcore extends the python programming language, many advanced concepts are exposed during the process. For the motivated, this is a great way to see how many of the internals of python work. | A whirlwind tour through fastcore . Here are some things you can do with fastcore that immediately caught my attention. . . Making **kwargs transparent . Whenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example: . def baz(a, b=2, c =3, d=4): return a + b + c def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, **kwargs)&gt; . Without reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates: . def baz(a, b=2, c =3, d=4): return a + b + c @delegates(baz) # this decorator will pass down keyword arguments from baz def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4)&gt; . You can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs: . @delegates(baz, keep=True) def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4, **kwargs)&gt; . You can also exclude arguments. For example, we exclude argument d from delegation: . def basefoo(a, b=2, c =3, d=4): pass @delegates(basefoo, but= [&#39;d&#39;]) # exclude `d` def foo(c, a, **kwargs): pass inspect.signature(foo) . &lt;Signature (c, a, b=2)&gt; . You can also delegate between classes: . class BaseFoo: def __init__(self, e, c=2): pass @delegates()# since no argument was passsed here we delegate to the superclass class Foo(BaseFoo): def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs) inspect.signature(Foo) . &lt;Signature (a, b=1, c=2)&gt; . For more information, read the docs on delegates. . . Avoid boilerplate when setting instance attributes . Have you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__? . class Test: def __init__(self, a, b ,c): self.a, self.b, self.c = a, b, c . Ouch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr: . class Test: def __init__(self, a, b, c): store_attr() t = Test(5,4,3) assert t.b == 4 . You can also exclude certain attributes: . class Test: def __init__(self, a, b, c): store_attr(but=[&#39;c&#39;]) t = Test(5,4,3) assert t.b == 4 assert not hasattr(t, &#39;c&#39;) . There are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail. . . Avoiding subclassing boilerplate . One thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example: . class ParentClass: def __init__(self): self.some_attr = &#39;hello&#39; class ChildClass(ParentClass): def __init__(self): super().__init__() cc = ChildClass() assert cc.some_attr == &#39;hello&#39; # only accessible b/c you used super . We can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass: . class NewParent(ParentClass, metaclass=PrePostInitMeta): def __pre_init__(self, *args, **kwargs): super().__init__() class ChildClass(NewParent): def __init__(self):pass sc = ChildClass() assert sc.some_attr == &#39;hello&#39; . . Type Dispatch . Type dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y: . collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship . Type dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks. . Unfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function: . @typedispatch def f(x:str, y:str): return f&#39;{x}{y}&#39; @typedispatch def f(x:np.ndarray): return x.sum() @typedispatch def f(x:int, y:int): return x+y . Below is a demonstration of type dispatch at work for the function f: . f(&#39;Hello &#39;, &#39;World!&#39;) . &#39;Hello World!&#39; . f(2,3) . 5 . f(np.array([5,5,5,5])) . 20 . There are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask). . After using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing. . . A better version of functools.partial . functools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values &gt;= val: . test_input = [1,2,3,4,5,6] def f(arr, val): &quot;Filter a list to remove any values that are less than val.&quot; return [x for x in arr if x &gt;= val] f(test_input, 3) . [3, 4, 5, 6] . You can create a new function out of this function using partial that sets the default value to 5: . filter5 = partial(f, val=5) filter5(test_input) . [5, 6] . One problem with partial is that it removes the original docstring and replaces it with a generic docstring: . filter5.__doc__ . &#39;partial(func, *args, **keywords) - new function with partial application n of the given arguments and keywords. n&#39; . fastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent: . filter5 = partialler(f, val=5) filter5.__doc__ . &#39;Filter a list to remove any values that are less than val.&#39; . . Composition of functions . A technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers: . def add(arr, val): return [x + val for x in arr] def arrsum(arr): return sum(arr) # See the previous section on partialler add2 = partialler(add, val=2) transform = compose(filter5, add2, arrsum) transform([1,2,3,4,5,6]) . 15 . But why is this useful? You might me thinking, I can accomplish the same thing with: . arrsum(add2(filter5([1,2,3,4,5,6]))) . You are not wrong! However, composition gives you a convenient interface in case you want to do something like the following: . def fit(x, transforms:list): &quot;fit a model after performing transformations&quot; x = compose(*transforms)(x) y = [np.mean(x)] * len(x) # its a dumb model. Don&#39;t judge me return y # filters out elements &lt; 5, adds 2, then predicts the mean fit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) . [7.5, 7.5] . For more information about compose, read the docs. . . A more useful __repr__ . In python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier). . class Test: def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously Test(1) . &lt;__main__.Test at 0x7fe0ab662790&gt; . We can use basic_repr to quickly give us a more sensible default: . class Test: def __init__(self, a, b=2, c=3): store_attr() __repr__ = basic_repr(&#39;a,b,c&#39;) Test(2) . Test(a=2, b=2, c=3) . . Monkey Patching With A Decorator . It can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so: . class MyClass(int): pass @patch def func(self:MyClass, a): return self+a mc = MyClass(3) . Now, MyClass has an additional method named func: . mc.func(10) . 13 . Still not convinced? I&#39;ll show you another example of this kind of patching in the next section. . . A better pathlib.Path . When you see these extensions to pathlib.path you won&#39;t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as: . Path.readlines: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.readlines() | Path.read: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.read() | Path.save: saves file as pickle | Path.load: loads pickle file | Path.ls: shows the contents of the path as a list. | etc. | . Read more about this here. Here is a demonstration of ls: . from pathlib import Path p = Path(&#39;../_notebooks&#39;) p.ls() # you don&#39;t get this with vanilla Pathlib.Path!! . (#21) [Path(&#39;../_notebooks/gpt2_simple_mask.jpg&#39;),Path(&#39;../_notebooks/bert_mac_small.jpg&#39;),Path(&#39;../_notebooks/causal_with_prefix.jpg&#39;),Path(&#39;../_notebooks/.DS_Store&#39;),Path(&#39;../_notebooks/2020-03-07-How_to_Create_an_Automatic_Code_Comment_Generator_using_Deep_Learning.ipynb&#39;),Path(&#39;../_notebooks/2020-09-01-fastcore.ipynb&#39;),Path(&#39;../_notebooks/2020-03-07-Syntax-Highlighting.ipynb&#39;),Path(&#39;../_notebooks/2020-03-06-bart.ipynb&#39;),Path(&#39;../_notebooks/README.md&#39;),Path(&#39;../_notebooks/2020-05-01-TrainDonkeyCar.ipynb&#39;)...] . Wait! What&#39;s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.foundation module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I&#39;ll go ahead and add another method to Path right now: . @patch def fun(self:Path): return &quot;This is fun!&quot; p.fun() . &#39;This is fun!&#39; . That is magical, right? I know! That&#39;s why I&#39;m writing about it! . . An Even More Concise Way To Create Lambdas . Self, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let&#39;s create a lambda for taking the sum of a Numpy array: . arr=np.array([5,4,3,2,1]) f = lambda a: a.sum() assert f(arr) == 15 . You can use Self in the same way: . f = Self.sum() assert f(arr) == 15 . Let&#39;s create a lambda that does a groupby and max of a Pandas dataframe: . import pandas as pd df=pd.DataFrame({&#39;Some Column&#39;: [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, ], &#39;Another Column&#39;: [5, 7, 50, 70]}) f = Self.groupby(&#39;Some Column&#39;).mean() f(df) . Another Column . Some Column . a 6 | . b 60 | . Read more about Self in the docs). . . Notebook Functions . These are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell: . in_notebook(), in_colab(), in_ipython() . (True, False, True) . This is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment. . . A Drop-In Replacement For List . You might be pretty happy with Python&#39;s list. This is one of those situations that you don&#39;t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies. . The best way I can describe L is to pretend that list and numpy had a pretty baby: . define a list (check out the nice __repr__ that shows the length of the list!) . L(1,2,3) . (#3) [1,2,3] . Shuffle a list: . p = L.range(20).shuffle() p . (#20) [2,0,18,6,15,17,14,8,12,1...] . Index into a list: . p[2,4,6] . (#3) [18,15,14] . L has sensible defaults, for example appending an element to a list: . 1 + L(2,3,4) . (#4) [1,2,3,4] . There is much more L has to offer. Read the docs to learn more. . But Wait ... There&#39;s More! . There are more things I would like to show you about fastcore, but there is no way they would reasonably fit into a blog post. Here is a list of some of my favorite things that I didn&#39;t demo in this blog post: . Utilities . The Utilites section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides. . mk_class: quickly add a bunch of attributes to a class | wrap_class: add new methods to a class with a simple decorator | groupby: similar to Scala&#39;s groupby | merge: merge dicts | fasttuple: a tuple on steroids | Infinite Lists: useful for padding and testing | chunked: for batching and organizing stuff | . Multiprocessing . The Multiprocessing section extends python&#39;s multiprocessing library by offering features like: . progress bars | ability to pause to mitigate race conditions with external services | processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks | . Functional Programming . The functional programming section is my favorite part of this library. . maps: a map that also composes functions | mapped: A more robust map | using_attr: compose a function that operates on an attribute | . Transforms . Transforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post. . Further Reading . It should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation. . The fastcore documentation site. | The fastcore GitHub repo. | Blog post on delegation. | . Shameless plug: fastpages . This blog post was written entirely in a Jupyter Notebook, which GitHub automatically converted into to a blog post! Sound interesting? Check out fastpages. .",
            "url": "https://hacstac.github.io/Notes/fastcore/",
            "relUrl": "/fastcore/",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Docker Easy Parts",
            "content": "1.0 What is a Docker . . 1.1 Introduction . Defination : Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. . Docker container technology was launched in 2013 as an open source Docker Engine. Containers encapsulate an application as a single executable package of software that bundles application code together with all of the related configuration files, libraries, and dependencies required for it to run. . Containerized applications are “isolated” in that they do not bundle in a copy of the operating system. Instead, an open source Docker engine is installed on the host’s operating system and becomes the conduit for containers to share an operating system with other containers on the same computing system. . . . 1.2 Below is a list of common Docker terms . Docker Engine is a client-server application with 3 major components - a server which is a type of long-running program called a daemon process; a REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do; a command line interface (CLI) client. . | Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. . | Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon. . | Image is a read-only template with instructions for creating a Docker container. You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it. . | Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. . | Container is a runnable instance of an image. Containers are made possible by operating system (OS) process isolation and virtualization, which enable multiple application components to share the resources of a single instance of an OS kernel. . | . 1.3 Architecture of docker . Docker on your host machine is (at the time of writing) split into two parts—a daemon with a RESTful API and a client that talks to the daemon. You invoke the Docker client to get information from or give instructions to the daemon; the daemon is a server that receives requests and returns responses from the client using the HTTP protocol. In turn, it will make requests to other services to send and receive images, also using the HTTP protocol. The server will accept requests from the command-line client or anyone else authorized to connect. The daemon is also responsible for taking care of your images and containers behind the scenes, whereasthe client acts as the intermediary between you and the RESTful API. . . . . . 2.0 Installation . . Docker can operate on most of the Operating Systems In Industries : Windows, MacOS, Most Of flavours of Linux ( Ubuntu, RHEL, Arch) | Docker Operates on both AMD64 and ARM Based Systems | . # Simple script to install docker on Linux $ curl -sSL https://get.docker.com/ | sh # Check Docker Verison $ docker version --format &#39;&#39; 19.03.8 # Dump Raw JSON DATA : Like Kernel, Architecture , details , build time etc $ docker version --format &#39;&#39; # Running Docker without sudo $ sudo usermod -aG docker username or $ sudo addgroup -a username docker # restart docker . . . 3.0 Docker Basics . . 3.1 Day To Day Docker Commands . . docker create creates a container but does not start it. | docker rename allows the container to be renamed. | docker run creates and starts a container in one operation. | docker rm deletes a container. | docker update updates a container’s resource limits. | docker images shows all images. | docker cp copies files or folders between a container and the local filesystem. | docker build creates image from Dockerfile. | docker commit creates image from a container, pausing it temporarily if it is running. | docker rmi removes an image. . | docker start starts a container so it is running. | docker stop stops a running container. | docker restart stops and starts a container. | docker pause pauses a running container, “freezing” it in place. | docker unpause will unpause a running container. | docker wait blocks until running container stops. | docker kill sends a SIGKILL to a running container. | docker attach will connect to a running container. . | docker ps shows running containers. | docker logs gets logs from container. (You can use a custom log driver, but logs is only available for json-file and journald in 1.10). | docker inspect looks at all the info on a container (including IP address). | docker events gets events from container. | docker port shows public facing port of container. | docker top shows running processes in container. | docker stats shows containers’ resource usage statistics. | docker diff shows changed files in the container’s FS. | docker history shows history of image. | docker tag tags an image to a name (local or registry). | . . 3.2 Getting Practical . . 3.2.1 List Images . docker images // show images docker ps -a docker ps // shows started containers -a = all containers . 3.2.2 Start/Stop/Restart . docker stop/start/restart . Note : If you want to detach from a running container, use Ctrl + P, Ctrl + Q. If you want to integrate a container with a host process manager, start the daemon with -r=false then use docker start -a. . 3.2.3 Logs . docker logs {Name_of_container} . 3.2.4 Rename . docker rename new_name current_name // rename container . 3.2.5 Create container . docker create nginx // will only create a container . 3.2.6 Example Run . $ docker run --interactive --tty --link web:web --name web_test busybox:1.29 /bin/sh -d = detach automatically the container (run container in background and print container ID) --interactive --tty or -t that will allocate a pseudo-TTY session --link = link to other container --name = name of docker container $ docker exec web_test ps // show extra process run with this containers . 3.2.7 Docker Run with SHELL Variables . CID=$(docker create nginx:latest) echo $CID // assigns to a Shell variable MAILER_CID=$(docker run -d dockerinaction/ch2_mailer) WEB_CID=$(docker create nginx) $ docker start $AGENT_CID $ docker start $WEB_CID . 3.2.8 Env Variables . $ docker run -d --name wpdb -e MYSQL_ROOT_PASSWORD=ch2demo mysql:5.7 $ docker run --env MY_ENVIRONMENT_VAR=&quot;this is a test&quot; busybox:1.29 env # --env flag, or -e for short, can be used to inject any environment variable. . 3.2.9 With Read Only Option . docker run -d --name wp --read-only wordpress:5.0.0-php7.2-apache // create a container with only readonly options . 3.2.10 Inspect . # The docker inspect command will display all the metadata(JSON) $ docker inspect --format &quot;&quot; wp // Prints true if container is running $ docker inspect --format &quot;&quot; Id/name // Show ip of container . 3.2.11 Diff ( Filesystem check ) . $ docker run -d --name wp_writable wordpress:5.0.0-php7.2-apache # let’s check where Apache changed the container’s filesystem with the docker $ docker container diff wp_writable A - A file or directory was added D - A file or directory was deleted C - A file or directory was changed C /run C /run/apache2 A /run/apache2/apache2.pid . 3.2.12 Clean Up . docker rm -f {container_ID) docker rm -vf $(docker ps -a -q) docker rmi [name] // Remove an image . 3.2.13 Executing Commands . # docker exec to execute a command in container. # To enter a running container, attach a new shell process to a running container called foo, use: $ docker exec -it foo /bin/bash. # exec Modes : # 1 Basic : Runs the command in the container synchronously on the command line $ docker exec name_of_container echo &quot;Hello User&quot; Hello User # 2 Daemon : Runs the command in the background on the container $ docker exec -d name_C find / -ctime 7 -name &#39;*log&#39; -exec rm {} ; # 3 Interactive : Runs the command and allows the user to interact with it $ docker exec -it ubuntu /bin/bash . 3.2.15 Linking containers for port isolation . Note : This is an older method of declaring container communication—Docker’s link flag. This isn’t the recommended way of working anymore. . # Example # This will allow us communication between containers without using user-defined networks. $ docker run --name wp-mysql -e MYSQL_ROOT_PASSWORD=yoursecretpassword -d mysql $ docker run --name wordpress --link wp-mysql:mysql -p 10003:80 -d wordpress . 3.2.16 Search a Docker Image . docker search node docker pull node // Pull the Image by Name ( on Hub ) docker run -it node /bin/bash ( Start Node Container ) . 3.2.17 Cleanly Kill Containers . # Always use docker stop ( it actually stops the containers ). # Docker kill will send immediate signal which will kill process while running ( so they can create temp files ) kill Term 15 docker kill Kill 9 docker stop Term 15 . 3.2.18 Docker Prune . # Prune commands docker system prune docker volume prune docker network prune docker container prune docker image prune # Example # Nuclear Option ( if you want to remove all containers of your host machine ) [Removes all : Runnig &amp; exited] $ docker ps -a -q | xargs --no-run-if-empty docker rm -f # To keep running containers $ docker ps -a -q --filter status=exited | xargs --no-run-if-empty docker rm # To list out all exited &amp; failed Containers $ comm -3 &lt;(docker ps -a -q --filter=status=exited | sort) &lt;(docker ps -a -q --filter=exited=0 | sort) | xargs --no-run-if-empty docker inspect &gt; error_containers # Prune Volumes # List out all docker voluems $ docker volume ls # Delete Unused Volumes $ docker volume prune . 3.2.19 Space Occupied By docker System . $ docker system df TYPE TOTAL ACTIVE SIZE RECLAIMABLE Images 7 1 1.963GB 1.885GB (95%) Containers 1 1 0B 0B Local Volumes 2 1 242.4MB 242.3MB (99%) Build Cache 0 0 0B 0B . 3.2.20 Container Stats . $ docker stats ID CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS . 3.2.21 Tag . docker image tag ubuntu-git:latest ubuntu-git:2.7 . 3.2.22 Commit . $ docker container commit -a &quot;@dockerinaction&quot; -m &quot;Added git&quot; image-dev ubuntu-git # Outputs a new unique image identifier like: # bbf1d5d430cdf541a72ad74dfa54f6faec41d2c1e4200778e9d4302035e5d143 # Build a New Image For Commited Image $ docker container run -d ubuntu-git . 3.2.23 Set an EntryPoint . docker container run --name cmd-git --entrypoint git ubuntu-git . . 3.2.24 Versioning Best Practice . # Docker official Repo&#39;s are the best example of tagging an image # Example for go lang 1.x 1.9 1.9.6 1.9-stretch 1.10-alpine latest # this is an example of tags to build that don&#39;t confuse the end user . . 3.3 States of Docker . Docker container can be in one of six states: . Created | Running | Restarting | Paused | Removing | Exited (also used if the container has never been started) | . . Created : A container that has been created (e.g. with docker create) but not started | Running : A currently running container | Paused : A container whose processes have been paused | Exited : A container that ran and completed (“stopped” in other contexts, although a created container is technically also “stopped”) | Dead : A container that the daemon tried and failed to stop (usually due to a busy device or resource used by the container) | Restarting : A container that is in the process of being restarted | . 3.3.1 Restart State . Using the --restart flag at container-creation time, you can tell Docker to do any of the following: . Never restart (default) | Attempt to restart when a failure is detected | Attempt for some predetermined time to restart when a failure is detected | Always restart the container regardless of the condition . | Methods no = = Don’t restart when the container exits | always == Always restart when the container exits | unless-stopped == Always restart, but remember explicitly stopping | on-failure[:max-retry] == Restart only on failure | . | . # Example Run $ docker run -d --name backoff-detector --restart always busybox:1.29 date $ docker logs -f backoff-detector . . 3.4 Init &amp; PID Systems for Docker . Several such init systems could be used inside a container. The most popular include runit, Yelp/dumb-init, tini, supervisord, and tianon/gosu . . $ docker run -d -p 80:80 --name lamp-test tutum/lamp $ docker top lamp-test $ docker exec lamp-test ps $ docker exec lamp-test kill &lt;PID&gt; // kill a process $ docker run --entrypoint=&quot;cat&quot; wordpress:5.0.0-php7.2-apache /usr/local/bin/docker-entrypoint.sh # If you run through the displayed script, you’ll see how it validates the environment variables against the dependencies of the software and sets default values. Once the script has validated that WordPress can execute . . 3.5 Software Installation Simplified . Three main ways to install Docker images: . Using Docker registries | Using image files with docker save and docker load | Building images with Dockerfiles | . we can install software in three other ways: . You can use alternative repository registries or run your own registry. | You can manually load images from a file. | You can download a project from some other source and build an image by using a provided Dockerfile. | . Note : - Keep in mind for Tags with images [latest, stable, alpha, Beta] . Download image from another regestry instead of docker hub : docker pull quay.io/dockerinaction/ch3_hello_registry:latest | [REGISTRYHOST:PORT/][USERNAME/]NAME[:TAG] | . 3.5.1 Installing Images using dockerfile . git clone https://github.com/dockerinaction/ch3_dockerfile.git docker build -t dia_ch3/dockerfile:latest ch3_dockerfile . . 3.6 Backup &amp; Restore Docker Images . docker export turns container filesystem into tarball archive stream to STDOUT. | docker import creates an image from a tarball. | docker load loads an image from a tar archive as STDIN, including images and tags (as of 0.7). | docker save saves an image to a tar archive stream to STDOUT with all parent layers, tags &amp; versions (as of 0.7). | . 3.6.1 Comparison . Docker export : Container To TAR Docker Import : TAR to Image Docker save : Image To TAR Docker load : TAR to Image . 3.6.2 Getting Practical . $ docker login/logout // get access to private repo on docker hub $ docker save [image_name] $ docker save -o myfile.tar image_name:latest // saves tar file in current directory $ docker load –i myfile.tar # Load/Save image - Load an image from file: $ docker load &lt; my_image.tar.gz # Save an existing image: $ docker save my_image:my_tag | gzip &gt; my_image.tar.gz # Import/Export container # Import a container as an image from file: $ cat my_container.tar.gz | docker import - my_image:my_tag # Export an existing container: $ docker export my_container | gzip &gt; my_container.tar.gz # Difference between loading a saved image and importing an exported container as an image Loading an image using the load command creates a new image including its history. Importing a container as an image using the import command creates a new image excluding the history which results in a smaller image size compared to loading an image. # Save the State of Docker Image: # we can save the state of image by commiting ( like we do in source control ) $ docker commit my_container # Creates a new Image ID # Restore State of Conatiner $ docker run [options] New_Image_ID # There is problem here. Docker Images ID&#39;s are 256Bit long, So there is no way to remember. what stuff we commit ( solution : is Tagging ) # Tag $ docker tag ID_OF_IMAGE imagename $ docker run imagename ( instead of 256Bit long ID ) # We can also Reffer to a specific image in builds # mention ID of Specific Build of Image ( like we did in previous steps ) and use it docker file. # Remember : This is image is locally available ( docker is not looking this on Docker HUB ) FROM 8eaa4ff06b53 ## Walkthrough of Saving States # Install 2048 Game ( for this we need VNC viewer ( TigerVNC ) $ docker run -d -p 5901:5901 -p 6080:6080 --name win2048 imiell/win2048 $ vncviewer localhost:1 (:1 If you have no X display on host ) # connect to port 5901 &amp; default password for vnc viewer is &#39;vncpass&#39; # Save a Game ( Commit Container ) $ docker commit win2048 1((co14-1)) $ docker tag ID 2048tag:$(date +%s) # Return To the Save Game $ docker run -d -p 5901:5901 -p 6080:6080 --name win2048 my2048tag:$mytag . . 3.7 Generating Dependency graph of Docker Image . # genrate a tree of dependecies of image $ git clone https://github.com/docker-in-practice/docker-image-graph $ cd docker-image-graph $ docker build -t dockerinpractice/docker-image-graph $ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock dockerinpractice/docker-image-graph &gt; docker_images.png . . 3.8 Tricks for Making an Image Smaller . 3.8.1 Method 1 : Reduce the size of Third Party Image . # Step 1 : Remove Unnecessary file # Step 2 : Flatten the Image ( describe in this book ) # Step 3 : Check Which Packages we dont need ( $ dpkg -l | awk &#39;{print $2}&#39; # Step 4 : Remove Packages ( apt-get purge -y package name ) # Step 5 : Clean the cache ( apt-get autoremove, apt-get clean ) # Step 6 : Remove all the man pages and other doc files : $ rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/info/* # Step 7 : Clean the Temp data &amp; logs in (/var) $ find /var | grep &#39; .log$&#39; | xargs rm -v # Step 8 : Commit The Image ( These Steps Creates a Much Smaller Image ) . 3.8.2 Method 2 : Tiny Docker Images with BusyBox and Alpine . Small, usable OSs that can be embedded onto a low-power or cheap computer have existed since Linux began. . # BusyBox ( Weight of BusyBox 2.5 MB ) # BusyBox is so small ( so it can&#39;t uses the bash. It uses ash ) $ docker run -it busybox /bin/ash # problem is that busybox don&#39;t uses any package manager : so for installing packages $ docker run -it progrium/busybox /bin/ash (Size: 5 MB ) # its uses opkg package manager $ opkg-install bash &gt; /dev/null $ bash ( Size of contianer is 6 MB with Bash Shell ) ( get ready to play with bash ) # Alpine ( 36 MB ) Package Manager : APK FROM gliderlabs/alpine:3.6 RUN apk-install mysql-client ENTRYPOINT [&quot;mysql&quot;] list of packages : https://pkgs.alpinelinux.org/packages . 3.8.3 Method 3 : The GO model of minimal containers . # we can minimal Web server with go [ 5 MB Web Server ] https://github.com/docker-in-practice/go-web-server Dockerfile FROM golang:1.4.2 RUN CGO_ENABLED=0 go get -a -ldflags &#39;-s&#39; -installsuffix cgo github.com/docker-in-practice/go-web-server CMD [&quot;cat&quot;,&quot;/go/bin/go-web-server&quot;] $ docker build -t go-webserver . $ mkdir -p go-web-server &amp;&amp; cd go-web-server $ docker run go-webserver &gt; go-web-server $ chmod +x go-web-server $ echo Hi &gt; page.html FROM scratch ADD go-web-server /go-web-server ADD page.html /page.html ENTRYPOINT [&quot;/go-web-server&quot;] $ docker build -t go-web-server . $ docker images | grep go-web-server $ docker run -p 8080:8080 go-web-server -port 8080 . Note : Remember One Large image is much efficient than some small images : Because it saves space on your HDD and save network bandwidth also &amp; Easy to maintainable. . Example : One Ubuntu Image with Node, Python, Nginx and other services ( around 1GB) (assigns only 1 IP) Many small container are request internet ( so they consume bandwidth more &amp; also they will consume more space than 1 GB ) . . . 4.0 Storage Volumes . . 4.1 Day To Day Volumes Command . docker volume create | docker volume rm | docker volume ls | docker volume inspect | . . 4.2 Types of Volumes . The three most common types of storage mounted into containers: . Bind mounts | In-memory storage | Docker volumes | . 4.2.1 Bind Mounts . Bind mounts are mount points used to remount parts of a filesystem tree onto other locations. When working with containers, bind mounts attach a user-specified location on the host filesystem to a specific point in a container file tree. . CONF_SRC=~/example.conf; CONF_DST=/etc/nginx/conf.d/default.conf; LOG_SRC=~/example.log; LOG_DST=/var/log/nginx/custom.host.access.log; docker run -d --name diaweb --mount type=bind,src=${CONF_SRC},dst=${CONF_DST} --mount type=bind,src=${LOG_SRC},dst=${LOG_DST} -p 80:80 nginx:latest . 4.2.2 In-Memory Storage . Most service software and web applications use private key files, database passwords, API key files, or other sensitive configuration files, and need upload buffering space. In these cases, it is important that you never include those types of files in an image or write them to disk. Instead, you should use in-memory storage. You can add in-memory storage to containers with a special type of mount. . # 1777 permissions in octal # tmpfs-size=16k memory-based filesystem into a containerdocker run --rm --mount type=tmpfs,dst=/tmp,tmpfs-size=16k,tmpfs-mode=1770 --entrypoint mount alpine:latest -v . 4.2.3 Docker Volumes . Docker volumes are named filesystem trees managed by Docker. They can be implemented with disk storage on the host filesystem, or another more exotic backend such as cloud storage. All operations on Docker volumes can be accomplished using the docker volume subcommand set. . . docker volume create --driver local --label example=location location-example docker volume inspect --format &quot;&quot; location-example . . 4.3 Moving Docker to a different Partition . # Stop Docker Daemon ( service docker stop ) $ $ dockerd -g /home/dockeruser/mydocker . Note : This will wipe all the containers and images from your previous Docker daemon. . . 4.4 Access Filesystem from Docker Container . # This will mount /dotfiles folder to container $ docker run -v /home/hacstac/dotfiles:~/dotfiles -t debian bash . . 4.5 Share Volumes Across the internet . # In this we use a technology called Resilio # Example ( 2 Machines ) : Setup Resilio on both Machine - That synchronized a volume ( Connected through a Secret Key ) # Machine 1 $ docker run -d -p 8888:8888 -p 55555:55555 --name resilio ctlc/btsync # docker logs resilio Or ( Lazy ) -&gt; Use Portainer ( Logs ) # copy secret key $ docker run -it --volumes-from resilio ubuntu /bin/bash # create Data in ubuntu : touch /data/shared_from_server # Machine 2 # setup resilio client $ docker run -d --name resilio-client -p 8888:8888 -p 55555:55555 ctlc/btsync key_of_server # Setup ubuntu $ docker run -it --volumes-from resilio-client ubuntu /bin/bash # our data folder is now available in this &amp; if you create a file in here then it will synchronized to Machine 1 also. . . 4.6 Using a Centralized Data Volumes For Containers . # Create a volume with docker which store a data which you need in other docker containers $ docker run -v /codebase --name codebase busybox # access the codebase $ docker run -it --volumes-from codebase ubuntu /bin/bash . . 4.7 Mounting the remote file systems . # This will need FUSE Kernel Module to be loaded on Host OS ( filesystem and userspace ) # Required Root Access ( Danger ) # 4.7.1. SSHFS # Local Host $ docker run -it --privileged debian /bin/bash # Inside a Container $ sudo apt-get update &amp;&amp; apt-get install sshfs $ LOCALPATH=/path/to/directory/ $ mkdir $LOCALPATH $ sshfs -o nonempty user@host:/path/to/directory $LOCALPATH # to unmount fusermount -u /path/to/local/directory # Now the remote folder is mount on LOCALPATH # 4.7.2 NFS # Install a NFS on host ( because docker doesn&#39;t support NFS ) $ apt-get install nfs-kernel-server $ mkdir /export $ chmod 777 /export $ mount --bind /opt/test/db /export # add this to fstab ( if you want to persist over reboot ) /etc/fstab file: /opt/test/db /export none bind 0 0 # add this to /etc/exports /export 127.0.0.1(ro,fsid=0,insecure,no_subtree_check,async) # to Read/Write : change ro to rw &amp; add no_root_squash (After async) # To open to the internet replace localhost to * ( Danger : Think about it ) $ mount -t nfs 127.0.0.1:/export /mnt $ exportfs -a $ service nfs-kernel-server restart # Run a container $ docker run -it --name nfs-client --privileged -v /mnt:/mnt busybox /bin/true # Mount on other container $ docker run -it --volumes-from nfs-client debian /bin/bash . . . 5.0 Networks in Docker . . 5.1 Day To Day Network Commands . docker network create | docker network rm | docker network ls | docker network inspect | docker network connect | docker network disconnect | . . 5.2 Examples . 5.2.1 To list all networks . $ docker network ls NETWORK ID NAME DRIVER SCOPE f32f6d51e8c8 bridge bridge local 366d3d1f4719 hacstac_default bridge local 6c08bddba2c4 host host local b726554d155b none null local . 5.2.2 To Create a New Network . $ docker network create --driver bridge --label project=dockerinaction --label chapter=5 --attachable --scope local --subnet 10.0.42.0/24 --ip-range 10.0.42.128/25 user-network $ docker run -it --network user-network --name network-explorer alpine:3.8 sh # CTRL-P + CTRL-Q Detech # docker attach network-explorer # walkthrough $ docker network create my_network [ Create a Network ] $ docker network connect my_network blog1 [ blog1 container connect to a network my_network ] $ docker run -it --network my_network ubuntu:16.04 bash [ Now this ubuntu container have access to blog1 Container ] $ ip -f inet -4 -o addr // this will list loopback and assign ip subnet address . 5.2.3 Create a another bridge network . $ docker network create --driver bridge --attachable --scope local --subnet 10.0.43.0/24 --ip-range 10.0.43.128/25 user-network2 # Attach priviously created container attach to this network $ docker network connect user-network2 network-explorer # then this container lists two ethernet addresses # scan with nmap $ nmap -sn 10.0.42.* -sn 10.0.43.* -oG /dev/stdout | grep Status . 5.2.4 With Network - none : Means container with no external excess . $ docker run --rm --network none alpine:3.8 ping -w 2 1.1.1.1 # it will try to ping 1.1.1.1 but it failed because this container hace no external network access # NodePort Publishing # 8080:8000 will denote 8080 port of host machine and 8000 port of container $ docker run -d -p 8080 --name listener alpine:3.8 $ docker port listener // To view port of running container . 5.2.5 DNS with docker . # Feature 1 : --hostname will add hostname : so we open with DN $ docker run --rm --hostname barker alpine:3.8 nslookup barker Server: 10.0.2.3 Address 1: 10.0.2.3 Name: barker Address 1: 172.17.0.22 barker - # Feature 2 : --dns : set dns server on container $ docker run --rm --dns 8.8.8.8 alpine:3.8 nslookup docker.com # Feature 3 : --dns-search : allows us to specify a DNS searchdomain, which is like a default hostname suffix $ docker run --rm --dns-search docker.com --dns 1.1.1.1 alpine:3.8 cat /etc/resolv.conf # Will display contents that look like: # search docker.com # nameserver 1.1.1.1 # Feature 4 : --add-host $ docker run --rm --hostname mycontainer --add-host docker.com:127.0.0.1 --add-host test:10.10.10.2 alpine:3.8 cat /etc/hosts 172.17.0.45 mycontainer 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopbackfe00 ::0 ip6-localnetff00::0 ip6-mcastprefixff02 ::1 ip6-allnodesff02::2 ip6-allrouters 10.10.10.2 test 127.0.0.1 docker.com . 5.2.6 You can specify a specific IP address for a container . # create a new bridge network with your subnet and gateway for your ip block $ docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic # run a nginx container with a specific ip in that block $ docker run --rm -it --net iptastic --ip 203.0.113.2 nginx # curl the ip from any other place (assuming this is a public ip block duh) $ curl 203.0.113.2 . 5.2.7 Open a Docker Daemon to the World . # first of stop the docker service $ sudo service docker stop / or $ sudo systemctl stop docker # Checks for docker daemon ?? $ ps -ef | grep -E &#39;docker(d| -d| daemon) b&#39; | grep -v grep # Expose to local host : 2375 $ sudo docker daemon -H tcp://0.0.0.0:2375 # To connect $ docker -H tcp://&lt;your host&#39;s ip&gt;:2375 &lt;subcommand&gt; . 5.2.8 Get an IP &amp; Ports of a Docker Container . $ alias dl=&#39;docker ps -l -q&#39; ( latest container ID ) $ docker inspect $(dl) | grep -wm1 IPAddress | cut -d &#39;&quot;&#39; -f 4 Pass ( ID of container Instead of dl ) : this above command gives ip of latest container # get ports $ docker inspect -f &#39; -&gt; &#39; 274d2292a137 | name_of_container . . . 6.0 Limiting Risk with Resource Controls . . 6.1 Memory Limits . $ docker container run -d --name ch6_mariadb --memory 256m --cpu-shares 1024 --cap-drop net_raw -e MYSQL_ROOT_PASSWORD=test mariadb:5.5 # This container only uses the 256M memory . . 6.2 CPU Limits . $ docker container run -d -P --name ch6_wordpress --memory 512m --cpu-shares 512 --cap-drop net_raw --link ch6_mariadb:mysql -e WORDPRESS_DB_PASSWORD=test wordpress:5.0.0-php7.2-apache # if total cpu share is 1536 - 512 ( 33% ) : this container consume 33% of cpu shares $ docker container run -d -P --name ch6_wordpress --memory 512m --cpus 0.75 --cap-drop net_raw --link ch6_mariadb:mysql -e WORDPRESS_DB_PASSWORD=test wordpress:5.0.0-php7.2-apache # This Container : consumed max 75% of cpu cores # also we can use {--cpuset-cpus 0-4} (cores) . . 6.3 Access to devices . $ docker container run -it --rm --device /dev/video0:/dev/video0 ubuntu:16.04 ls -al /dev # --device flag will mount external device to container . . 6.4 Sharing Memory ( IPC : Interprocess Communication ) . # Producer $ docker container run -d -u nobody --name ch6_ipc_producer --ipc shareable dockerinaction/ch6_ipc -producer # Consumer $ docker container run -d --name ch6_ipc_consumer --ipc container:ch6_ipc_producer dockerinaction/ch6_ipc -consumer # we can see the process of one container in another : by using docker logs { they share the memory space } # IMP NOTE : In docker to clean Volumes $ docker rm -vf name_of_container . . 6.5 Understanding Users . # if we want to setup a container with diff user then $ docker container run --rm --user nobody busybox:1.29 id $ docker container run --rm -u 1000:1000 busybox:1.29 /bin/bash -c &quot;echo This is important info &gt; /logFiles/important.log&quot; # with this userID:GroupID we can access the file system of this users . . 6.6 OS features Access with Capabilities . Linux capabilities can be set by using cap-add and cap-drop. See https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities for details. This should be used for greater security. . SYS_MODULE —Insert/remove kernel modules SYS_RAWIO — Modify kernel memory SYS_NICE — Modify priority of processes SYS_RESOURCE — Override resource limits SYS_TIME — Modify the system clock AUDIT_CONTROL — Configure audit subsystem MAC_ADMIN — Configure MAC configuration SYSLOG — Modify kernel print behavior NET_ADMIN — Configure the network SYS_ADMIN — Catchall for administrative functions $ docker container run --rm -u nobody --cap-add sys_admin ubuntu:16.04 /bin/bash -c &quot;capsh --print | grep sys_admin&quot; # this --cap-add sys_admin will add admin facilities to container # we can inspect docker with .HostConfig.CapAdd &amp;&amp; .HostConfig.CapDrop show capabilities # Give access to a single device: $ docker run -it --device=/dev/ttyUSB0 debian bash # Give access to all devices: $ docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb debian bash # Docker Container with full privileges $ docker container run --rm --privileged ubuntu:16.04 capsh ls /dev # check out list of mounted devices . . 6.7 Additional Security with Docker . $ docker container run --rm -it --security-opt seccomp=path_to_the_secomp conf file ubuntu:16.04 sh # For Linux Security Modules ( LSM ) The LSM security option values are specified in one of seven formats: - To prevent a container from gaining new privileges after it starts, use &#39;no-new-privileges&#39; - To set a SELinux user label, use the form label=user:username, where is the name of the user you want to use for the label. - To set a SELinux role label, use the form label=role:role where is the name of the role you want to apply to processes in the container. - To set a SELinux type label, use the form label=type:type , where is the type name of the processes in the container. - To set a SELinux-level label, use the form &#39;label:level:label&#39; , where is the level at which processes in the container should run. Levels are specified as low-high pairs. Where abbreviated to the low level only, SELinux will inter-pret the range as single level. - To disable SELinux label confinement for a container, use the form label=disable # NOTE : Avoid Running Containers in privileged mode whenever possible . . 6.8 Using Socat to monitor docker api traffic . In this technique you’ll insert a proxy Unix domain socket between your request and the server’s socket to see what passes through it. Note that you’ll need root or sudo privileges to make this work. . # We need a socat ( Install socat as per the OS package Maneger ) $ socat -v UNIX-LISTEN:/tmp/dockerapi.sock,fork UNIX-CONNECT:/var/run/docker.sock &amp; In this command, -v makes the output readable, with indications of the flow of data.The UNIX-LISTEN part tells socat to listen on a Unix socket, fork ensures that socatdoesn’t exit after the first request, and UNIX-CONNECT tells socat to connect toDocker’s Unix socket. The &amp; specifies that the command runs in the background.If you usually run the Docker client with sudo, you’ll need to do the same thing here as well. # List all containers $ docker -H unix:///tmp/dockerapi.sock ps -a # This will show how client request to daemon . . 6.9 Setting TimeZone in Containers . # Runs a command to display the time zone on the host $ date +%Z // UTC # change TimeZone FROM centos:7 RUN rm -rf /etc/localtime RUN ln -s /usr/share/zoneinfo/Asia/Kolkata /etc/localtime CMD date +%Z # Build Image $ docker build -t timezone_change . $ docker run timezone_change Asia/Kolkata . . 6.10 Locale Management . locale will be set in the environment through the LANG,LANGUAGE, and locale-gen variables . # you are getting encoding error if correct locale is not set. # Check for locale $ env | grep LANG LANG=en_GB.UTF-8 This is British English, with text encoded in UTF-8. # Set Locale FROM ubuntu:16.04 RUN apt-get update &amp;&amp; apt-get install -y locales RUN locale-gen en_US.UTF-8 ENV LANG en_US.UTF-8 ENV LANGUAGE en_US:en CMD env $ $ docker build -t encoding . . . .",
            "url": "https://hacstac.github.io/Notes/markdown/2020/08/29/Docker-Easy-Parts.html",
            "relUrl": "/markdown/2020/08/29/Docker-Easy-Parts.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hacstac.github.io/Notes/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hacstac.github.io/Notes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hacstac.github.io/Notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hacstac.github.io/Notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}