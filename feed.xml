<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://hacstac.github.io/Notes/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hacstac.github.io/Notes/" rel="alternate" type="text/html" /><updated>2020-09-14T04:30:34-05:00</updated><id>https://hacstac.github.io/Notes/feed.xml</id><title type="html">NoteBook</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">Docker Hard Parts</title><link href="https://hacstac.github.io/Notes/markdown/2020/09/01/Docker-Hard-Parts.html" rel="alternate" type="text/html" title="Docker Hard Parts" /><published>2020-09-01T00:00:00-05:00</published><updated>2020-09-01T00:00:00-05:00</updated><id>https://hacstac.github.io/Notes/markdown/2020/09/01/Docker-Hard-Parts</id><content type="html" xml:base="https://hacstac.github.io/Notes/markdown/2020/09/01/Docker-Hard-Parts.html">&lt;h2 id=&quot;70-building-images-automatically-with-dockerfiles&quot;&gt;7.0 Building Images automatically with DockerFiles&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;71-instructions&quot;&gt;7.1 Instructions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; Sets the Base Image for subsequent instructions.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt; (deprecated - use LABEL instead) Set the Author field of the generated images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt; execute any commands in a new layer on top of the current image and commit the results.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; provide defaults for an executing container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPOSE&lt;/code&gt; informs Docker that the container listens on the specified network ports at runtime. NOTE: does not actually make ports accessible.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt; sets environment variable.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt; copies new files, directories or remote file to container. Invalidates caches. Avoid ADD and use COPY instead.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; copies new files or directories to container. By default this copies as root regardless of the USER/WORKDIR settings. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;&lt;/code&gt; to give ownership to another user/group. (Same for ADD.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; configures a container that will run as an executable.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VOLUME&lt;/code&gt; creates a mount point for externally mounted volumes or other containers.*   USER sets the user name for following RUN / CMD / ENTRYPOINT commands.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; sets the working directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARG&lt;/code&gt; defines a build-time variable.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt; adds a trigger instruction when the image is used as the base for another build.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STOPSIGNAL&lt;/code&gt; sets the system call signal that will be sent to the container to exit.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LABEL&lt;/code&gt; apply key/value metadata to your images, containers, or daemons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : If your running dangerous commands ( add a logic that it fails if your shell is outside docker )&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#  Shell script fails if it’s run outside a container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /.dockerenv &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Not in a Docker container, exiting.'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;72-getting-practical&quot;&gt;7.2 Getting Practical&lt;/h3&gt;

&lt;h5 id=&quot;721-packaging-git-with-dockerfile&quot;&gt;7.2.1 Packaging Git with Dockerfile&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create a file name Dockerfile&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:latest
LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dia@allingeek.com&quot;&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Instantly Create Dockerfile Images&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; htop - &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
FROM alpine
RUN apk --no-cache add htop
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image build &lt;span class=&quot;nt&quot;&gt;--tage&lt;/span&gt; ubuntu-git:auto  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:latest — Tells Docker to start from the latest Ubuntu image just as
you did when creating the image manually.

LABEL maintainer — Sets the maintainer name and email &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the image. Provid-
ing this information helps people know whom to contact &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;there’s a problem
with the image. This was accomplished earlier when you invoked
commit.

RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git — Tells the builder to run the
provided commands to &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Git.

ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; — Sets the entrypoint &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the image to  git.
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --file or -f will read from diff file like 'BuildScript or anything'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --quiet or -q will run in quiet mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;722-dockerignore&quot;&gt;7.2.2 Dockerignore&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;.dockerignore file will help us to exclude some files to add to the image during the build&lt;/li&gt;
  &lt;li&gt;CLI modifies the context to exclude files and directories that match patterns in it. This helps to avoid unnecessarily sending large or sensitive files and directories to the daemon and potentially adding them to images using ADD or COPY.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;723-file-system-instructions&quot;&gt;7.2.3 File System Instructions&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- COPY : Will copy files from the filesystem where the image is being built.
- VOLUME : Same as &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; flag &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bound mount volume &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- CMD : This is a closely related to ENTRYPOINT
- ADD : This operates similarly to the COPY instruction with two imp differences:
           - fetch remote sources files &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;a Url is specified
           - Extract the files of any &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;determined to be an archive file
- ONBUILD : This instruction &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;the other instructions to execute &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;resulting image is used as base img &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;another build &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Example&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ADD : We can ADD large no of files to a container without any problem&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Docker will unpack tarfiles of most standard types (.gz, .bz2, .xz, .tar).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# some.tar&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM Debian
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/libeatmydata
ADD some.tar.gz /opt/libeatmydata/
RUN &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lRt&lt;/span&gt; /opt/libeatmydata
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ONBUILD : Use the ONBUILD command to automate and encapsulate the building of an image.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# GO Example  ( Outyet : Simple Go App )&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/golang/example
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;example/outyet
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; outyet &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; outyet1 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; outyet
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

With ONBUILD
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM golang:onbuild
EXPOSE 8080
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

golang:onbuild Dockerfile
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM golang:1.7
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /go/src/app
WORKDIR /go/src/app
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;go-wrapper&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ONBUILD COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /go/src/app
ONBUILD RUN go-wrapper download
ONBUILD RUN go-wrapper &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
The result of this technique is that you have an easy way to build an image that only contains  the  code  required  to  run  it, and no more.
There are also other examples of ONBUILD exists : node:onbuild , python:onbuild


&lt;span class=&quot;c&quot;&gt;# ENTRYPOINT : Sets the entrypoint for the image&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Basic Shell Script for clean logs&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cleaning logs over &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; days old&quot;&lt;/span&gt;
find /log_dir &lt;span class=&quot;nt&quot;&gt;-ctime&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*log'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a DockerFile ( Create a container with clean_log script )&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:17.04
ADD clean_log /usr/bin/clean_log
RUN &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /usr/bin/clean_log
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/clean_log&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; log-cleaner &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/log/myapplogs:/log_dir log-cleaner 365
&lt;span class=&quot;c&quot;&gt;# Clean The logs of over a year ( default 7 days if no arg given )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;724-create-a-maintainable-dockerfiles&quot;&gt;7.2.4 Create a Maintainable Dockerfiles&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- ARG : arg defines a variable thta &lt;span class=&quot;nb&quot;&gt;users &lt;/span&gt;can provide to docker when building and a image.
Ex: Dockerfile
ARG &lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unknown
ENV &lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
LABEL base.version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.6&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; docker image build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; dockerinaction/mailer-base:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; mailer-base.df &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--build-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
dockerinaction/mailer-base:0.6

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;base.name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Mailer Archetype&quot;&lt;/span&gt;,
   &lt;span class=&quot;s2&quot;&gt;&quot;base.version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.6&quot;&lt;/span&gt;,
   &lt;span class=&quot;s2&quot;&gt;&quot;maintainer&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;dia@allingeek.com&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;725-init-system-for-docker&quot;&gt;7.2.5 Init System for Docker&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Most Popular init systems are : runit, tini, BusyBox init, Supervisord, and DAEMON&lt;/li&gt;
  &lt;li&gt;By Default docker comes with tini init system&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; alpine:3.6 nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000
&lt;span class=&quot;c&quot;&gt;# Docker ran /dev/init -- nc -l -p 3000 inside the container instead of just nc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;726-health-check-in-docker&quot;&gt;7.2.6 Health Check In Docker&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- There are two ways to specify the health check &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;:
1. Use a HEALTHCHECK instruction when defining the image
2. On the command-line when running a container

1. This is a 1st Mothed : It is used when we define an Image
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;FROM nginx:1.13-alpine
HEALTHCHECK &lt;span class=&quot;nt&quot;&gt;--interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5s &lt;span class=&quot;nt&quot;&gt;--retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 CMD nc &lt;span class=&quot;nt&quot;&gt;-vz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 2 localhost 80 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'table \t\t'&lt;/span&gt;
NAMES            IMAGE                       STATUS
healthcheck_ex   dockerinaction/healthcheck  Up 3 minutes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;healthy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#  Exit Status Codes&lt;/span&gt;
- 0: success—The container is healthy and ready &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;use.
- 1: unhealthy—The container is not working correctly.
- 2: reserved—Do not use this &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code.

2. Command-line Method
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;healthcheck_ex &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--health-cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'nc -vz -w 2 localhost 80 || exit 1'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
nginx:1.13-alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;727-hardening-application-images&quot;&gt;7.2.7 Hardening Application Images&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- There are Three Methods to hardended the images
1. We can enforce that our images are built from a specific image.
2. we can make sure that regardless of how containers are built from our image, they will have a sensible default user.
3. we should eliminate a common path &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;root user escalation
from programs with setuid or setgid attributes set.


1. Content Addressable Images identifiers &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; CAIID &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Build Images using authentic digest : that digest is known as CAIID&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# So now how many images we build from these they are authentic.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
docker pull debian:stable
stable: Pulling from library/debian
31c6765cabf1: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Digest: sha256:6aedee3ef827...
&lt;span class=&quot;c&quot;&gt;# Dockerfile:&lt;/span&gt;
FROM debian@sha256:6aedee3ef827...
...
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

2. Create a User &amp;amp; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;RUN groupadd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; postgres &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; useradd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; postgres postgres

3. SUID &amp;amp; GUID
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;FROM ubuntu:latest
&lt;span class=&quot;c&quot;&gt;# Set the SUID bit on whoami&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;u+s /usr/bin/whoami
&lt;span class=&quot;c&quot;&gt;# Create an example user and set it as the default&lt;/span&gt;
RUN adduser &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-create-home&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--disabled-password&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--disabled-login&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--shell&lt;/span&gt; /bin/sh example
USER example
&lt;span class=&quot;c&quot;&gt;# Set the default to compare the container user and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the effective user for whoami&lt;/span&gt;
CMD &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Container running as: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Effectively running whoami as: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
Output
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
Container running as: example
Effectively running &lt;span class=&quot;nb&quot;&gt;whoami &lt;/span&gt;as: root
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

The output of the default &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;shows that even though you’ve executed the
&lt;span class=&quot;nb&quot;&gt;whoami command &lt;/span&gt;as the example user, it’s running from the context of the root user.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;728-complete-story-of-cache&quot;&gt;7.2.8 Complete Story of Cache&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# --no-cache will downlaod fresh containers from source. it will not use the cache files&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Example&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Busting the Cache&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we need this because some time our image build takes so much time. so we need cache up to a certain point.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Method 1 (cheat) :&lt;/span&gt;
Add a benign comment after the &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to invalidate the cache. This works because Docker treats the non-whitespace change to theline as though it were a new &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;, so the cached layer is not re-used.
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#bust the cache&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Method 2 ( using ARG )&lt;/span&gt;
Use the ARG directive &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your Dockerfile to &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;surgical cache-busting.
If this ARG variable isset to a value never used before on your host, the cache will be busted from that point.
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
WORKDIR todo
ARG &lt;span class=&quot;nv&quot;&gt;CACHEBUST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
RUN npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--build-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CACHEBUST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; 19856
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; 26429

&lt;span class=&quot;c&quot;&gt;# If not using Bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;--build-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CACHEBUST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Method 3 ( Using ADD )&lt;/span&gt;
There are two useful features of ADD that you can use to your advantage &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this context: it caches the contents of the file it refers to, and it can take a network resource as an argument.
&lt;span class=&quot;c&quot;&gt;# Git Repo Example&lt;/span&gt;
It means &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;repo is not changed it uses cache or &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;git repo is changed it rebuild the image from scratch.
But it will vary from resources &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;to resource type.

we can take &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;of Github API here : It  has  URLs  foreach repository that &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;JSON &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the most recent commits. When a new commit ismade, the content of the response changes.

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:16.04
ADD https://api.github.com/repos/nodejs/node/commits  /dev/null
RUN git clone https://github.com/nodejs/node
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;729-flattening-images&quot;&gt;7.2.9 Flattening Images&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is imp because images can reveal the imp information&lt;/span&gt;
Example :

&lt;span class=&quot;c&quot;&gt;# create a docker file : It has sensitive information&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM debian
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Big Secret&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /tmp/secret_key
RUN &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /tmp/secret_key
RUN &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /tmp/secret_key
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; secret &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# But now problem arise&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;secret
...
5e39caf7560f 3 days ago /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Big Secret&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /tmp/se 14 B
...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run 5b376ff3d7cd &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /tmp/secret_key
My Big Secret

But &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;someone could download this image from public repo and insect the &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &amp;amp; run thi &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; : It reveal the secret.

&lt;span class=&quot;c&quot;&gt;# To get rid of this type of problem : we need to remove intermediate layering&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we need to export the image as a trivially run container&lt;/span&gt;
and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;re-import and tag the resulting image:
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; secret /bin/true
- new_id

&lt;span class=&quot;c&quot;&gt;# Runs a docker export, taking a conatiner iD as arg and outgoing a tar file of fs contents.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is piped to docker import which takes tar file and create a new image.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;new_id | docker import - new_secret
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;new_secret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;73-refer&quot;&gt;7.3 Refer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#dockerfile-examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://crosbymichael.com/&quot;&gt;Michael Crosby&lt;/a&gt; has some more &lt;a href=&quot;http://crosbymichael.com/dockerfile-best-practices.html&quot;&gt;Dockerfiles best practices&lt;/a&gt; / &lt;a href=&quot;http://crosbymichael.com/dockerfile-best-practices-take-2.html&quot;&gt;take 2&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jonathan.bergknoff.com/journal/building-good-docker-images&quot;&gt;Building Good Docker Images&lt;/a&gt; / &lt;a href=&quot;http://jonathan.bergknoff.com/journal/building-better-docker-images&quot;&gt;Building Better Docker Images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/garethr/managing-container-configuration-with-metadata&quot;&gt;Managing Container Configuration with Metadata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rock-it.pl/how-to-write-excellent-dockerfiles/&quot;&gt;How to write excellent Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;80-registry--repository&quot;&gt;8.0 Registry &amp;amp; Repository&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_Hard_Parts/Repository.png&quot; alt=&quot;Registry.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A repository is a &lt;em&gt;hosted&lt;/em&gt; collection of tagged images that together create the file system for a container.&lt;/p&gt;

&lt;p&gt;A registry is a &lt;em&gt;host&lt;/em&gt; – a server that stores repositories and provides an HTTP API for &lt;a href=&quot;https://docs.docker.com/engine/tutorials/dockerrepos/&quot;&gt;managing the uploading and downloading of repositories&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;81-enviornment&quot;&gt;8.1 Enviornment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/login&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login&lt;/code&gt;&lt;/a&gt; to login to a registry.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/logout&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker logout&lt;/code&gt;&lt;/a&gt; to logout from a registry.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/search&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker search&lt;/code&gt;&lt;/a&gt; searches registry for image.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/pull&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pull&lt;/code&gt;&lt;/a&gt; pulls an image from registry to local machine.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/push&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker push&lt;/code&gt;&lt;/a&gt; pushes an image to the registry from local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; : Refer Chapter 9 of Docker in Action : Public and private
software distribution ( This Cover’s Every Basic detail about Registry &amp;amp; Repository )&lt;/p&gt;

&lt;h3 id=&quot;82-setup-local-docker-registry&quot;&gt;8.2 Setup Local Docker Registry&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# To start a registry on local Network&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5000:5000 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/registry:/var/lib/registry registry:2

&lt;span class=&quot;c&quot;&gt;# This  command  makes  the  registry  available  on  port  5000  of  the  Docker  host(-p  5000:5000).  With  the  -v  flag,  it  makes  the  registry folder on your host(/var/lib/registry)  available  in  the  container  as  $HOME/registry.  The  registry’s  fileswill therefore be stored on the host in the /var/lib/registry folder.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# HOSTNAME is the hostname or IP address of your new reg-istry server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we also use --insecure-registry ( We know our local network is secure :) [Docker will only allow you to pull from registries with a signedHTTPS certificate.] )&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push the image to the registry&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push HOSTNAME:5000/image:tag.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;90-docker-compose&quot;&gt;9.0 Docker Compose&lt;/h2&gt;

&lt;p&gt;Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see the &lt;a href=&quot;https://docs.docker.com/compose/overview/#features&quot;&gt;list of features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The standard filename for Compose files is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;91-yaml-basics&quot;&gt;9.1 YAML Basics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A YAML document can include a comment at the end of any line. Com￾ments are marked by a space followed by a hash sign ( #). Any characters that follow until the end of the line are ignored by the parser.&lt;/li&gt;
  &lt;li&gt;YAML uses three types of data and two styles of describing that data, block and flow.
    &lt;ul&gt;
      &lt;li&gt;Flow collections are specified similarly to collection literals in JavaScript and other
languages. For example, the following is a list of strings in the flow style: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&quot;PersonA&quot;,&quot;PersonB&quot;]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The block style is more common and will be used in this primer except where noted.
The three types of data are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maps&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lists&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scalar values&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;Maps are defined by a set of unique properties in the form of key/value pairs that
are delimited by a colon and space (: ).&lt;/li&gt;
          &lt;li&gt;Scaler Values : Scaler String &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image: &quot;alpine&quot;&lt;/code&gt;
  , Scaler Command : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command: echo hello world&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Scaler Rules :
            &lt;ol&gt;
              &lt;li&gt;Must not be empty,&lt;/li&gt;
              &lt;li&gt;Must not contain leading or trailing whitespace characters&lt;/li&gt;
              &lt;li&gt;Must not begin with an indicator character (for example, - or :) in places where
doing so would cause an ambiguity.&lt;/li&gt;
              &lt;li&gt;Must never contain character combinations using a colon (:) and hash sign (#)&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;Lists (or block sequences) are series of nodes in which each element is denoted by a
leading hyphen (-) indicator. For example:
      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- item 1&lt;/code&gt;
      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- item 2&lt;/code&gt;
      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- item 3&lt;/code&gt;
      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- # an empty item&lt;/code&gt;
      &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- item 4&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Indentation Rules : YAML uses indentation to indicate content scope. Scope determines which
block each element belongs to. There are a few rules:
    &lt;ul&gt;
      &lt;li&gt;Only spaces can be used for indentation.&lt;/li&gt;
      &lt;li&gt;The amount of indentation does not matter as long as
  – All peer elements (in the same scope) have the same amount of indentation.
  – Any child elements are further indented.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These documents are equivalent:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;top-level:
 second-level: # three spaces
 third-level: # two more spaces
 - &quot;list item&quot; # single additional indent on items in this list
 another-third-level: # a third-level peer with the same two spaces
 fourth-level: &quot;string scalar&quot; # 6 more spaces
 another-second-level: # a 2nd level peer with three spaces
 - a list item # list items in this scope have
 # 15 total leading spaces
 - a peer item # A peer list item with a gap in the list
---
# every scope level adds exactly 1 space
top-level:
 second-level:
 third-level:
 - &quot;list item&quot;
 another-third-level:
 fourth-level: &quot;string scalar&quot;
 another-second-level:
 - a list item
 - a peer item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;92-docker-compose-basics&quot;&gt;9.2 Docker Compose Basics&lt;/h3&gt;

&lt;p&gt;By using the following command you can start up your application:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# first install docker-compose on your system (eg: Ubuntu )
$ sudo apt install docker-compose
$ docker-compose -f &amp;lt;docker-compose-file&amp;gt; up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also run docker-compose in detached mode using -d flag, then you can stop it whenever needed by the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can bring everything down, removing the containers entirely, with the down command. Pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--volumes&lt;/code&gt; to also remove the data volume.&lt;/p&gt;

&lt;p&gt;Let understand Docker compose with an Example :&lt;/p&gt;

&lt;h5 id=&quot;921-example-yml&quot;&gt;9.2.1 Example yml&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wikijs.yml
---
version: '2'
services:
  db:
    image: postgres:11-alpine
    environment:
      POSTGRES_DB: wiki
      POSTGRES_PASSWORD: wikijsrocks
      POSTGRES_USER: wikijs
    logging:
      driver: &quot;none&quot;
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data

  wiki:
    image: requarks/wiki:2
    depends_on:
      - db
    environment:
      DB_TYPE: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: wikijs
      DB_PASS: wikijsrocks
      DB_NAME: wiki
    restart: unless-stopped
    ports:
      - &quot;80:3000&quot;

volumes:
  db-data:
---

# we can create a docker stack with this yml file ( it established a wikijs and postgresql db )
$ docker stack deploy -c wikijs.yml wikijs

# if we use docker swarn or Kubernetes we can create a replicas of this images into 3 diff servers
--
deploy:
 replicas: 3
--
# add this to end of yml and again deploy it. It will update the container

# To Check The State of stack
$ docker stack ps \
 --format '\t' \
 wikijs

# To remove a service from stack ( like limit the replicas from 3 to 2 )
$ docker stack deploy \
-c wikijs.yml \
--prune \
wikijs


We Need To use Prue Here : Because without Prune it will not completely remove services which causes problmes ( like for Instead of using postgressql we want to use a mysql so if we updated our stack yml file and deploy it. it will add mysql db but doesn't remove postgres containers so to remove postgres we use prune )

The --prune flag will clean up any resource in the stack that isn’t explicitly referenced
in the Compose file used for the deploy operation.

# Prune

The new [Data Management Commands](https://github.com/docker/docker/pull/26108) have landed as of Docker 1.13:

* `docker system prune`
* `docker volume prune`
* `docker network prune`
* `docker container prune`
* `docker image prune`


Note : There is a problem here everytime a container replaced docker will create a new volume space for container and its replicas. This would cause problems in a real-world system.
So, to get rid of this

EX:
---
volumes:
   pgdata: # empty definition uses volume defaults
services:
   postgres:
      image: dockerinaction/postgres:11-alpine
      volumes:
         - type: volume
         source: pgdata # The named volume above
         target: /var/lib/postgresql/data
      environment:
         POSTGRES_PASSWORD: example
---

The file defines a volume named pgdata, and the postgres service
mounts that volume at /var/lib/postgresql/data. That location is where the Postgre￾SQL software will store any database schema or data.

Inspect
$ docker stack deploy \
-c databases.yml \
--prune \
my-databases

$ docker volume ls
DRIVER  VOLUME NAME
local   my-databases_pgdata

$ docker service remove my-databases_postgres

Then restore the service by using the Compose file:
$ docker stack deploy \
-c databases.yml \
--prune \
my-databases


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;100-devops-operations-with-docker&quot;&gt;10.0 DevOps Operations With Docker&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;101-convert-your-virtual-box-vm-to-docker-container&quot;&gt;10.1 Convert Your Virtual Box VM To Docker Container&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Process : VM FILE (.vdi or anything) =&amp;gt; TAR =&amp;gt; Import TAR as an Image in Docker.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;qemu-utils

&lt;span class=&quot;c&quot;&gt;# Identify the path to your VM disk image. ( Stop the VM )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Sets up a variable pointingto your VM disk image.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ VMDISK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/VirtualBox VMs/myvm/myvm.vdi&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initializes a kernelmodule requiredby qemu-nbd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe nbd

&lt;span class=&quot;c&quot;&gt;# Connects the VM disk to a virtual device node&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;qemu-nbd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /dev/nbd0 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VMDISK3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;CO1-3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Lists the partition numbers available to mount on this disk&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /dev/nbd0p&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /dev/nbd0p1 /dev/nbd0p2

&lt;span class=&quot;c&quot;&gt;# Mounts the selected partition at /mnt with qemu-nbd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount /dev/nbd0p2 /mnt

&lt;span class=&quot;c&quot;&gt;# Creates a TAR filecalled img.tar from /mnt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo tar &lt;/span&gt;cf img.tar &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /mnt &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Unmounts and cleans up after qemu-nbd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;umount /mnt &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;qemu-nbd &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/nbd0

&lt;span class=&quot;c&quot;&gt;# Dockerfile&lt;/span&gt;
FROM scratch
ADD img.tar /

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;102-host-like-container&quot;&gt;10.2 Host Like Container&lt;/h3&gt;

&lt;p&gt;Containers are not virtual machines—there are significant differences—and pretending there aren’t can cause confusion and issues down the line.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Differences between VMs and Docker containers:
    &lt;ul&gt;
      &lt;li&gt;Docker is application-oriented, whereas VMs are operating-system oriented.&lt;/li&gt;
      &lt;li&gt;Docker  containers  share  an  operating  system  with  other  Docker  containers.  Incontrast, VMs each have their own operating system managed by a hypervisor.&lt;/li&gt;
      &lt;li&gt;Docker containers are designed to run one principal process, not manage mul-tiple sets of processes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; phusion/baseimage &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; This Image designed to run multiple processes.]
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; container_ID /bin/bash
ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; It starts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cron, sshd, and syslog&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; It Much like a host. &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;103-running-gui-in-containers&quot;&gt;10.3 Running GUI in Containers&lt;/h3&gt;

&lt;p&gt;Process : Create  an  image  with  your  user  credentials  and  the  program,  and  bind  mount  your Xserver to it.
Note : another method is to setup VNC server on container&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile for setting up firefox on container&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:14.04
RUN apt-get update
RUN apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; firefox
RUN groupadd &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; GID USERNAME
RUN useradd &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /home/USERNAME &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /bin/bash &lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;m USERNAME &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; UID &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; GID
USER USERNAME
ENV HOME /home/USERNAME
CMD /usr/bin/firefox
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; gui &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /tmp/.X11-unix:/tmp/.X11-unix &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOSTNAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.Xauthority:/home/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/.Xauthority &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DISPLAY&lt;/span&gt; gui

&lt;span class=&quot;c&quot;&gt;# It will popup firefox ( which runs on container )&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;104-using-docker-machine-to-provision-docker-hosts&quot;&gt;10.4 Using Docker Machine to Provision Docker Hosts&lt;/h3&gt;

&lt;p&gt;Docker-machine is a tool just like a vagrant. EX: we can setup VM with virtualBox with docker command.
walkthrough:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install Docker Machine on Linux&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/docker-machine &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /tmp/docker-machine &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /tmp/docker-machine /usr/local/bin/docker-machine

&lt;span class=&quot;c&quot;&gt;# Create a VM by docker daemon on Oracle Virtual Box&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine create &lt;span class=&quot;nt&quot;&gt;--driver&lt;/span&gt; virtualbox host1

&lt;span class=&quot;c&quot;&gt;# Run this command to set the DOCKER_HOST environment variable, which sets the default host that Docker commands will be run on&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine &lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;host1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker-machine &lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;host1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# we can direct to VM&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-machine ssh host1

Commands of Docker-Machine:
create  : Creates a new Machine
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;      : List Machines
stop    : Stop Machines
start   : Start Machines
restart : Restart Machines
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt;      : Destroys the machine
inspect : Returns a JSON representation of the machine’s metadata
config  : Return the config of machine
ip      : Returns the IP address of the machine
url     : Returns a URL &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the Docker daemon on the machine
upgrade : Upgrades the Docker version on the host to the latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;105-build-images-using-a-chef-solo&quot;&gt;10.5 Build Images using a Chef Solo&lt;/h3&gt;

&lt;p&gt;Chef : It is a configuration Management Tool ( using this can reduce the amount of work required to configure Images )&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here we setup hello world apache website ( Example ).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Need a working code&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/docker-in-practice/docker-chef-solo-example.git
&lt;span class=&quot;c&quot;&gt;# All the working code in there&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;into it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; there is a Dockerfile and some other files and folders &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; chef recepies etc &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; chef-example &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 chef-example
&lt;span class=&quot;c&quot;&gt;# This is a one time written code we can anywhere to deploy a website ( in such a small steps )&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;106-ci-operations-with-docker&quot;&gt;10.6 CI Operations With Docker&lt;/h3&gt;

&lt;p&gt;CI : Continious Integration&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_Hard_Parts/CIoperations.png&quot; alt=&quot;Image_pipeline.png&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;1061-steps&quot;&gt;10.6.1 Steps&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Check out a clean copy of the source code defining the image and build scripts so the origin and process used to build the image is known.&lt;/li&gt;
  &lt;li&gt;Retrieve or generate artifacts that will be included in the image, such as the application package and runtime libraries.&lt;/li&gt;
  &lt;li&gt;Build the image by using a Dockerfile.&lt;/li&gt;
  &lt;li&gt;Verify that the image is structured and functions as intended.&lt;/li&gt;
  &lt;li&gt;(Optional) Verify that the image does not contain known vulnerabilities.&lt;/li&gt;
  &lt;li&gt;Tag the image so that it can be consumed easily.&lt;/li&gt;
  &lt;li&gt;Publish the image to a registry or another distribution channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1062-method-1--builds-a-image-using-dockerhub-workflow--test-and-push-images-&quot;&gt;10.6.2 Method 1 : Builds a Image Using DockerHub Workflow ( Test and Push Images )&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# For this you will Git Repo and docker Hub Repo&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Link Docker Hub to to git repo ( it take code from git repo and compile and create a desired Image ( like other ci tools do )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# wait for the docker hub to build to complete&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Remember this is a basic solution&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;1063-method-2--setting-up-a-package-cache-for-faster-builds&quot;&gt;10.6.3 Method 2 : Setting up a package cache for faster Builds&lt;/h5&gt;

&lt;p&gt;While building the images it will take caches instead of download everytime from internet.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# We are using squid Proxy Here&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;squid-deb-proxy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;check &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;port 8000
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;create a Docker File
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; using a apt proxy
FROM debian
RUN apt-get update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;net-tools
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Acquire::http::Proxy &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
route &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^0.0.0.0/ {print $2}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:8000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/apt/apt.conf.d/30proxy
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Acquire::http::Proxy::ppa.launchpad.net DIRECT;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
/etc/apt/apt.conf.d/30proxy
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
This will cache all the webpages and apt package we downlaod after running this container : &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;again download them they will be download &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;miliseconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;1063-method-3--running-the-jenkins-master-withing-the-docker-container&quot;&gt;10.6.3 Method 3 : Running the Jenkins Master Withing the Docker Container&lt;/h5&gt;

&lt;p&gt;Portable Jenkins Server&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# download git clone https://github.com/docker-in-practice/jenkins.git.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Put your required plugins in jenkins_plugins.txt&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; Dockerfile
FROM jenkins
COPY jenkins_plugins.txt /tmp/jenkins_plugins.txt
RUN /usr/local/bin/plugins.sh /tmp/jenkins_plugins.txt
USER root
RUN &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /tmp/jenkins_plugins.txt
RUN groupadd &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; 999 docker
RUN addgroup &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; jenkins docker
USER jenkins
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jenkins &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jenkins &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 50000:50000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /tmp:/var/jenkins_home &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
jenkins

&lt;span class=&quot;c&quot;&gt;# go to localhost:8080 : Copy master password from logs&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Reliably Upgrade a Jenkins Server&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; Dockerfile
FROM docker
ADD jenkins_updater.sh /jenkins_updater.sh
RUN &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /jenkins_updater.sh
ENTRYPOINT /jenkins_updater.sh
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; Shell script to backup and restart Jenkins
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; docker pull jenkins | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;up.to.date
&lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;docker stop jenkins
docker rename jenkins jenkins.bak.&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d%H%M&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /var/docker/mounts/jenkins_home &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
/var/docker/mounts/jenkins_home.bak.&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d%H%M&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/docker/mounts/jenkins_home:/var/jenkins_home &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jenkins &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
jenkins
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# docker Command to run the Jenkins Updater&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/lib/docker:/var/lib/docker &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;/var/docker/mounts:/var/docker/mounts dockerinpractice/jenkins-updater

&lt;span class=&quot;c&quot;&gt;# to automate the process add this command to crontab&lt;/span&gt;
0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; dokcker_command

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;107-cd-operations-with-docker&quot;&gt;10.7 CD Operations with Docker&lt;/h3&gt;

&lt;p&gt;CD : Continious Delivery ( CI + Deployment )&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# Copy an Image Between Two Registries&lt;/span&gt;
Process &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Pulling the image from the registry -&amp;gt; retag -&amp;gt; pushing the new Image
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLDREG&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$MYIMAGE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NEWREG&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$MYIMAGE&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push &lt;span class=&quot;nv&quot;&gt;$NEWREG&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$MYIMAGE&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi &lt;span class=&quot;nv&quot;&gt;$OLDREG&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$MYIMAGE&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image prune &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy an Image btw Two Machine With a very low-bandwidth Connection&lt;/span&gt;

Process &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Here we use backup tool called Bup &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; creates a bup data tool &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example ( Not Exact data is used so please Don't judge me )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# pull two images like Ubuntu:18.04 &amp;amp; 19.10 ( Both are example = 65 MB Each = 130 MB )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;bup_pool
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dbup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker run --rm &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
-v &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bup_pool:/pool -v /var/run/docker.sock:/var/run/docker.sock dockerinpractice/dbup&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dbup save ubuntu:18.04
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sh&lt;/span&gt; bup_pool &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 74 MB &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dbup save ubuntu:19.10
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sh&lt;/span&gt; bup_pool &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 96 MB &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; Saves 35 MB &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# On other machine ( rsync from host1 to host2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dbup load ubuntu:18.04

&lt;span class=&quot;c&quot;&gt;# Also copies files between host with TAR&lt;/span&gt;
Docker &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; : creates Container To TAR
Docker Import : TAR to Image
Docker save   : Image To TAR
Docker load   : TAR to Docker Image

Example : Transfer docker Image directory over ssh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;  debian:7.3 &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; | ssh user@host docker import

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;108-cordination-between-containers&quot;&gt;10.8 Cordination Between Containers&lt;/h3&gt;

&lt;p&gt;We need coordination between containers : Like if we take an example of one server and one python based echo client.
P1: If we start the client container first : It will lead to failure
P2 : forgetting to remove the containers will result in
problems when you try to restart
P3 :  Naming containers incorrectly will result
in failure.
So how to get rid of this types of problem : we need a solution,where we can run the container without any problem.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# Solution : create a compose file&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
version: &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
   services:
     echo-server:
       image: server
       expose:
         - &lt;span class=&quot;s2&quot;&gt;&quot;2000&quot;&lt;/span&gt;
     client:
       image: client
       links:
- echo-server:talkto
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# with this we can start container in correct order &amp;amp; also we call rebuild the container anywhere&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up
Attaching to dockercompose_server_1, dockercompose_client_1
client_1 | Received: Hello, world
client_1 |
client_1 | Received: Hello, world
client_1 |

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;110-security-with-docker&quot;&gt;11.0 Security With Docker&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;This is where security tips about Docker go. The Docker &lt;a href=&quot;https://docs.docker.com/engine/security/security/&quot;&gt;security&lt;/a&gt; page goes into more detail.&lt;/p&gt;

&lt;p&gt;First things first: Docker runs as root. If you are in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; group, you effectively &lt;a href=&quot;https://web.archive.org/web/20161226211755/http://reventlov.com/advisories/using-the-docker-command-to-root-the-host&quot;&gt;have root access&lt;/a&gt;. If you expose the docker unix socket to a container, you are giving the container &lt;a href=&quot;https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container/&quot;&gt;root access to the host&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker should not be your only defense. You should secure and harden it.&lt;/p&gt;

&lt;p&gt;For an understanding of what containers leave exposed, you should read &lt;a href=&quot;https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2016/april/ncc_group_understanding_hardening_linux_containers-1-1.pdf&quot;&gt;Understanding and Hardening Linux Containers&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/dyn___&quot;&gt;Aaron Grattafiori&lt;/a&gt;. This is a complete and comprehensive guide to the issues involved with containers, with a plethora of links and footnotes leading on to yet more useful content. The security tips following are useful if you’ve already hardened containers in the past, but are not a substitute for understanding.&lt;/p&gt;

&lt;h3 id=&quot;111-security-tips&quot;&gt;11.1 Security Tips&lt;/h3&gt;

&lt;p&gt;For greatest security, you want to run Docker inside a virtual machine. This is straight from the Docker Security Team Lead – &lt;a href=&quot;http://www.slideshare.net/jpetazzo/linux-containers-lxc-docker-and-security&quot;&gt;slides&lt;/a&gt; / &lt;a href=&quot;http://www.projectatomic.io/blog/2014/08/is-it-safe-a-look-at-docker-and-security-from-linuxcon/&quot;&gt;notes&lt;/a&gt;. Then, run with AppArmor / seccomp / SELinux / grsec etc to &lt;a href=&quot;http://linux-audit.com/docker-security-best-practices-for-your-vessel-and-containers/&quot;&gt;limit the container permissions&lt;/a&gt;. See the &lt;a href=&quot;https://blog.docker.com/2016/02/docker-engine-1-10-security/&quot;&gt;Docker 1.10 security features&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Docker image ids are &lt;a href=&quot;https://medium.com/@quayio/your-docker-image-ids-are-secrets-and-its-time-you-treated-them-that-way-f55e9f14c1a4&quot;&gt;sensitive information&lt;/a&gt; and should not be exposed to the outside world. Treat them like passwords.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.adoc&quot;&gt;Docker Security Cheat Sheet&lt;/a&gt; by &lt;a href=&quot;https://github.com/konstruktoid&quot;&gt;Thomas Sjögren&lt;/a&gt;: some good stuff about container hardening in there.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/docker/docker-bench-security&quot;&gt;docker bench security script&lt;/a&gt;, download the &lt;a href=&quot;https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/&quot;&gt;white papers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Snyk’s &lt;a href=&quot;https://snyk.io/blog/10-docker-image-security-best-practices/&quot;&gt;10 Docker Image Security Best Practices cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should start off by using a kernel with unstable patches for grsecurity / pax compiled in, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Alpine_Linux&quot;&gt;Alpine Linux&lt;/a&gt;. If you are using grsecurity in production, you should spring for &lt;a href=&quot;https://grsecurity.net/business_support.php&quot;&gt;commercial support&lt;/a&gt; for the &lt;a href=&quot;https://grsecurity.net/announce.php&quot;&gt;stable patches&lt;/a&gt;, same as you would do for RedHat. It’s $200 a month, which is nothing to your devops budget.&lt;/p&gt;

&lt;p&gt;Since docker 1.11 you can easily limit the number of active processes running inside a container to prevent fork bombs. This requires a linux kernel &amp;gt;= 4.3 with CGROUP_PIDS=y to be in the kernel configuration.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --pids-limit=64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also available since docker 1.11 is the ability to prevent processes from gaining new privileges. This feature have been in the linux kernel since version 3.5. You can read more about it in &lt;a href=&quot;http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/&quot;&gt;this&lt;/a&gt; blog post.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --security-opt=no-new-privileges
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the &lt;a href=&quot;http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf&quot;&gt;Docker Security Cheat Sheet&lt;/a&gt; (it’s in PDF which makes it hard to use, so copying below) by &lt;a href=&quot;http://container-solutions.com/is-docker-safe-for-production/&quot;&gt;Container Solutions&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Turn off interprocess communication with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -d --icc=false --iptables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set the container to be read-only:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --read-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify images with a hashsum:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull debian@sha256:a25306f3850e1bd44541976aa7b5fd0a29be
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set volumes to be read only:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $(pwd)/secrets:/secrets:ro debian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Define and run a user in your Dockerfile so you don’t run as root inside the container:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN groupadd -r user &amp;amp;&amp;amp; useradd -r -g user user
USER user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;112-security-videos&quot;&gt;11.2 Security Videos&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/04LOuMgNj9U&quot;&gt;Using Docker Safely&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/KmxOXmPhZbk&quot;&gt;Securing your applications using Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/a9lE9Urr6AQ&quot;&gt;Container security: Do containers actually contain?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iN6QbszB1R8&quot;&gt;Linux Containers: Future or Fantasy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;113-security-roadmap&quot;&gt;11.3 Security Roadmap&lt;/h3&gt;

&lt;p&gt;The Docker roadmap talks about &lt;a href=&quot;https://github.com/docker/docker/blob/master/ROADMAP.md#11-security&quot;&gt;seccomp support&lt;/a&gt;.
There is an AppArmor policy generator called &lt;a href=&quot;https://github.com/jfrazelle/bane&quot;&gt;bane&lt;/a&gt;, and they’re working on &lt;a href=&quot;https://github.com/docker/docker/issues/17142&quot;&gt;security profiles&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Till 21 Aprill&lt;/p&gt;

&lt;h3 id=&quot;path-to-complete&quot;&gt;Path to Complete&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Docker access&lt;/li&gt;
  &lt;li&gt;Security Measures In Docker&lt;/li&gt;
  &lt;li&gt;Securing Access to Docker&lt;/li&gt;
  &lt;li&gt;Security from Outside docker&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;120-monitoring-docker&quot;&gt;12.0 Monitoring Docker&lt;/h2&gt;

&lt;h3 id=&quot;121-monitoring&quot;&gt;12.1 Monitoring&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;122-resource-control&quot;&gt;12.2 Resource Control&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;123-some-advance-approches&quot;&gt;12.3 Some Advance Approches&lt;/h3&gt;</content><author><name></name></author><category term="markdown" /><summary type="html">7.0 Building Images automatically with DockerFiles</summary></entry><entry><title type="html">Docker Easy Parts</title><link href="https://hacstac.github.io/Notes/markdown/2020/08/29/Docker-Easy-Parts.html" rel="alternate" type="text/html" title="Docker Easy Parts" /><published>2020-08-29T00:00:00-05:00</published><updated>2020-08-29T00:00:00-05:00</updated><id>https://hacstac.github.io/Notes/markdown/2020/08/29/Docker-Easy-Parts</id><content type="html" xml:base="https://hacstac.github.io/Notes/markdown/2020/08/29/Docker-Easy-Parts.html">&lt;h2 id=&quot;10-what-is-a-docker&quot;&gt;1.0 What is a Docker&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-introduction&quot;&gt;1.1 Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Defination&lt;/strong&gt; : Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package.&lt;/p&gt;

&lt;p&gt;Docker container technology was launched in 2013 as an open source Docker Engine. Containers encapsulate an application as a single executable package of software that bundles application code together with all of the related configuration files, libraries, and dependencies required for it to run.&lt;/p&gt;

&lt;p&gt;Containerized applications are “isolated” in that they do not bundle in a copy of the operating system. Instead, an open source Docker engine is installed on the host’s operating system and becomes the conduit for containers to share an operating system with other containers on the same computing system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_easy_parts/docker.png&quot; alt=&quot;Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_easy_parts/life_with_docker.png&quot; alt=&quot;Life With Docker&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-below-is-a-list-of-common-docker-terms&quot;&gt;1.2 Below is a list of common Docker terms&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Docker Engine&lt;/strong&gt; is a client-server application with 3 major components - a server which is a type of long-running program called a daemon process; a REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do; a command line interface (CLI) client.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Docker daemon&lt;/strong&gt; (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Docker client&lt;/strong&gt; (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Image&lt;/strong&gt; is a read-only template with instructions for creating a Docker container. You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Docker registry&lt;/strong&gt; stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is a runnable instance of an image. Containers are made possible by operating system (OS) process isolation and virtualization, which enable multiple application components to share the resources of a single instance of an OS kernel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-architecture-of-docker&quot;&gt;1.3 Architecture of docker&lt;/h3&gt;

&lt;p&gt;Docker on your host machine is (at the time of writing) split into two parts—a daemon with a RESTful API and a client that talks to the daemon. You invoke the Docker client to get information from or give instructions to the
daemon; the daemon is a server that receives requests and returns responses from the client using the HTTP protocol. In turn, it will make requests to other services to send and receive images, also using the HTTP protocol. The server will accept requests from the command-line client or anyone else authorized to connect. The daemon is also responsible for taking care of your images and containers behind the scenes, whereasthe client acts as the intermediary between you and the RESTful API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_easy_parts/Docker_architecture.png&quot; alt=&quot;Docker Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-south-1.amazonaws.com/akash.r/Devops_Notes_screenshots/Docker/Docker_easy_parts/working_docker_run.png&quot; alt=&quot;working_docker_run&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;20-installation&quot;&gt;2.0 Installation&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; can operate on most of the Operating Systems In Industries : Windows, MacOS, Most Of flavours of Linux ( Ubuntu, RHEL, Arch)&lt;/li&gt;
  &lt;li&gt;Docker Operates on both AMD64 and ARM Based Systems&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Simple script to install docker on Linux&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com/ | sh

&lt;span class=&quot;c&quot;&gt;# Check Docker Verison&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
19.03.8

&lt;span class=&quot;c&quot;&gt;# Dump Raw JSON DATA : Like Kernel, Architecture , details , build time etc&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Running Docker without sudo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker username

or

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;addgroup &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; username docker
&lt;span class=&quot;c&quot;&gt;# restart docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;30-docker-basics&quot;&gt;3.0 Docker Basics&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;31-day-to-day-docker-commands&quot;&gt;3.1 Day To Day Docker Commands&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker create&lt;/code&gt; creates a container but does not start it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker rename&lt;/code&gt; allows the container to be renamed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; creates and starts a container in one operation.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker rm&lt;/code&gt; deletes a container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker update&lt;/code&gt; updates a container’s resource limits.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker images&lt;/code&gt; shows all images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker cp&lt;/code&gt; copies files or folders between a container and the local filesystem.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; creates image from Dockerfile.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker commit&lt;/code&gt; creates image from a container, pausing it temporarily if it is running.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker rmi&lt;/code&gt; removes an image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker start&lt;/code&gt; starts a container so it is running.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stop&lt;/code&gt; stops a running container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker restart&lt;/code&gt; stops and starts a container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pause&lt;/code&gt; pauses a running container, “freezing” it in place.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker unpause&lt;/code&gt; will unpause a running container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker wait&lt;/code&gt; blocks until running container stops.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker kill&lt;/code&gt; sends a SIGKILL to a running container.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker attach&lt;/code&gt; will connect to a running container.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; shows running containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker logs&lt;/code&gt; gets logs from container. (You can use a custom log driver, but logs is only available for json-file and journald in 1.10).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; looks at all the info on a container (including IP address).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker events&lt;/code&gt; gets events from container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker port&lt;/code&gt; shows public facing port of container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker top&lt;/code&gt; shows running processes in container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stats&lt;/code&gt; shows containers’ resource usage statistics.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker diff&lt;/code&gt; shows changed files in the container’s FS.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker history&lt;/code&gt; shows history of image.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker tag&lt;/code&gt; tags an image to a name (local or registry).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;32-getting-practical&quot;&gt;3.2 Getting Practical&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;321-list-images&quot;&gt;3.2.1 List Images&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images // show images
docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
docker ps // shows started containers &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; all containers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;322-startstoprestart&quot;&gt;3.2.2 Start/Stop/Restart&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop/start/restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : If you want to detach from a running container, use Ctrl + P, Ctrl + Q.
If you want to integrate a container with a host process manager, start the daemon with -r=false then use docker start -a.&lt;/p&gt;

&lt;h4 id=&quot;323-logs&quot;&gt;3.2.3 Logs&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Name_of_container&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;324-rename&quot;&gt;3.2.4 Rename&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rename new_name current_name // rename container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;325-create-container&quot;&gt;3.2.5 Create container&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker create nginx // will only create a container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;326-example-run&quot;&gt;3.2.6 Example Run&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; web:web &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web_test &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 busybox:1.29 /bin/sh

 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; detach automatically the container &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;run container &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;background and print container ID&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; that will allocate a pseudo-TTY session
 &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;to other container
 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; name of docker container
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;web_test ps // show extra process run with this containers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;327-docker-run-with-shell-variables&quot;&gt;3.2.7 Docker Run with SHELL Variables&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;CID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker create nginx:latest&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CID&lt;/span&gt; // assigns to a Shell variable
 &lt;span class=&quot;nv&quot;&gt;MAILER_CID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; dockerinaction/ch2_mailer&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;WEB_CID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker create nginx&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start &lt;span class=&quot;nv&quot;&gt;$AGENT_CID&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start &lt;span class=&quot;nv&quot;&gt;$WEB_CID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;328-env-variables&quot;&gt;3.2.8 Env Variables&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wpdb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ch2demo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 mysql:5.7

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MY_ENVIRONMENT_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;this is a test&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;busybox:1.29 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --env flag, or -e for short, can be used to inject any environment variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;329-with-read-only-option&quot;&gt;3.2.9 With Read Only Option&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wp &lt;span class=&quot;nt&quot;&gt;--read-only&lt;/span&gt; wordpress:5.0.0-php7.2-apache  // create a container with only &lt;span class=&quot;nb&quot;&gt;readonly &lt;/span&gt;options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3210-inspect&quot;&gt;3.2.10 Inspect&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#  The docker inspect command will display all the metadata(JSON)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; wp // Prints &lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;container is running
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; Id/name // Show ip of container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3211-diff--filesystem-check-&quot;&gt;3.2.11 Diff ( Filesystem check )&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wp_writable wordpress:5.0.0-php7.2-apache

&lt;span class=&quot;c&quot;&gt;# let’s check where Apache changed the container’s filesystem with the docker&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container diff wp_writable

A - A file or directory was added
D - A file or directory was deleted
C - A file or directory was changed

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
C /run
C /run/apache2
A /run/apache2/apache2.pid
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3212-clean-up&quot;&gt;3.2.12 Clean Up&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;container_ID&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vf&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
docker rmi &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;name] // Remove an image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3213-executing-commands&quot;&gt;3.2.13 Executing Commands&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# docker exec to execute a command in container.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# To enter a running container, attach a new shell process to a running container called foo, use:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; foo /bin/bash.

&lt;span class=&quot;c&quot;&gt;# exec Modes :&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1 Basic : Runs the command in the container synchronously on the command line&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;name_of_container &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello User&quot;&lt;/span&gt;
Hello User

&lt;span class=&quot;c&quot;&gt;# 2 Daemon : Runs the command in the background on the container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; name_C &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
find / &lt;span class=&quot;nt&quot;&gt;-ctime&lt;/span&gt; 7 &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*log'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 3 Interactive : Runs the command and allows the user to interact with it&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3215-linking-containers-for-port-isolation&quot;&gt;3.2.15 Linking containers for port isolation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : This is an older method of declaring container communication—Docker’s link flag. This isn’t the recommended way of working anymore.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Example&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  This will allow us communication between containers without using user-defined networks.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wp-mysql &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yoursecretpassword &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wordpress &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; wp-mysql:mysql &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 10003:80 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;  wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3216-search-a-docker-image&quot;&gt;3.2.16 Search a Docker Image&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker search node
docker pull node // Pull the Image by Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; on Hub &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; node /bin/bash &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; Start Node Container &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3217-cleanly-kill-containers&quot;&gt;3.2.17 Cleanly Kill Containers&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Always use docker stop ( it actually stops the containers ).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Docker kill will send immediate signal which will kill process while running ( so they can create temp files )&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;kill           &lt;/span&gt;Term     15
docker &lt;span class=&quot;nb&quot;&gt;kill    &lt;/span&gt;Kill      9
docker stop    Term     15
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3218-docker-prune&quot;&gt;3.2.18 Docker Prune&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Prune commands&lt;/span&gt;

    docker system prune
    docker volume prune
    docker network prune
    docker container prune
    docker image prune

&lt;span class=&quot;c&quot;&gt;# Example&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Nuclear Option ( if you want to remove all containers of your host machine ) [Removes all : Runnig &amp;amp; exited]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;--no-run-if-empty&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# To keep running containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited | xargs &lt;span class=&quot;nt&quot;&gt;--no-run-if-empty&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# To list out all exited &amp;amp; failed Containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;comm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-3&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
xargs &lt;span class=&quot;nt&quot;&gt;--no-run-if-empty&lt;/span&gt; docker inspect &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; error_containers

&lt;span class=&quot;c&quot;&gt;# Prune Volumes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# List out all docker voluems&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker volume &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Delete Unused Volumes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker volume prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3219-space-occupied-by-docker-system&quot;&gt;3.2.19 Space Occupied By docker System&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker system &lt;span class=&quot;nb&quot;&gt;df
&lt;/span&gt;TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              7                   1                   1.963GB             1.885GB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;95%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Containers          1                   1                   0B                  0B
Local Volumes       2                   1                   242.4MB             242.3MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;99%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Build Cache         0                   0                   0B                  0B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3220-container-stats&quot;&gt;3.2.20 Container Stats&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker stats ID
CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT    MEM %               NET I/O             BLOCK I/O           PIDS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3221-tag&quot;&gt;3.2.21 Tag&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker image tag ubuntu-git:latest ubuntu-git:2.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3222-commit&quot;&gt;3.2.22 Commit&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@dockerinaction&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Added git&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  image-dev ubuntu-git
&lt;span class=&quot;c&quot;&gt;# Outputs a new unique image identifier like:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bbf1d5d430cdf541a72ad74dfa54f6faec41d2c1e4200778e9d4302035e5d143&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build a New Image For Commited Image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ubuntu-git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3223-set-an-entrypoint&quot;&gt;3.2.23 Set an EntryPoint&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; cmd-git &lt;span class=&quot;nt&quot;&gt;--entrypoint&lt;/span&gt; git ubuntu-git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;3224-versioning-best-practice&quot;&gt;3.2.24 Versioning Best Practice&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Docker official Repo's are the best example of tagging an image&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example for go lang&lt;/span&gt;
 1.x
 1.9
 1.9.6
 1.9-stretch
 1.10-alpine
 latest
 &lt;span class=&quot;c&quot;&gt;# this is an example of tags to build that don't confuse the end user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;33-states-of-docker&quot;&gt;3.3 States of Docker&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Docker container can be in one of six states:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created&lt;/li&gt;
  &lt;li&gt;Running&lt;/li&gt;
  &lt;li&gt;Restarting&lt;/li&gt;
  &lt;li&gt;Paused&lt;/li&gt;
  &lt;li&gt;Removing&lt;/li&gt;
  &lt;li&gt;Exited (also used if the container has never been started)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt; : A container that has been created (e.g. with docker create) but not started&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running&lt;/strong&gt; : A currently running container&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Paused&lt;/strong&gt; : A container whose processes have been paused&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exited&lt;/strong&gt; : A container that ran and completed (“stopped” in other contexts, although a created container is technically also “stopped”)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dead&lt;/strong&gt; : A container that the daemon tried and failed to stop (usually due to a busy device or resource used by the container)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restarting&lt;/strong&gt; : A container that is in the process of being restarted&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;331-restart-state&quot;&gt;3.3.1 Restart State&lt;/h4&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--restart&lt;/code&gt; flag at container-creation time, you can tell Docker to do any of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Never restart (default)&lt;/li&gt;
  &lt;li&gt;Attempt to restart when a failure is detected&lt;/li&gt;
  &lt;li&gt;Attempt for some predetermined time to restart when a failure is detected&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Always restart the container regardless of the condition&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;no = = Don’t restart when the container exits&lt;/li&gt;
      &lt;li&gt;always == Always restart when the container exits&lt;/li&gt;
      &lt;li&gt;unless-stopped == Always restart, but remember explicitly stopping&lt;/li&gt;
      &lt;li&gt;on-failure[:max-retry] == Restart only on failure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Example Run&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; backoff-detector &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always busybox:1.29 &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; backoff-detector
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;34-init--pid-systems-for-docker&quot;&gt;3.4 Init &amp;amp; PID Systems for Docker&lt;/h3&gt;

&lt;p&gt;Several such init systems could be used inside a container. The most popular include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runit, Yelp/dumb-init, tini, supervisord, and tianon/gosu&lt;/code&gt; .&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; lamp-test tutum/lamp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker top lamp-test
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lamp-test ps
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lamp-test &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &amp;lt;PID&amp;gt; // &lt;span class=&quot;nb&quot;&gt;kill &lt;/span&gt;a process

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--entrypoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cat&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 wordpress:5.0.0-php7.2-apache &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 /usr/local/bin/docker-entrypoint.sh

&lt;span class=&quot;c&quot;&gt;# If you run through the displayed script, you’ll see how it validates the environment variables against the dependencies of the software and sets default values. Once the script has validated that WordPress can execute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;35-software-installation-simplified&quot;&gt;3.5 Software Installation Simplified&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Three main ways to install Docker images:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using Docker registries&lt;/li&gt;
  &lt;li&gt;Using image files with docker save and docker load&lt;/li&gt;
  &lt;li&gt;Building images with Dockerfiles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;we can install software in three other ways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use alternative repository registries or run your own registry.&lt;/li&gt;
  &lt;li&gt;You can manually load images from a file.&lt;/li&gt;
  &lt;li&gt;You can download a project from some other source and build an image by using a provided Dockerfile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note : - Keep in mind for Tags with images [latest, stable, alpha, Beta]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download image from another regestry instead of docker hub : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pull quay.io/dockerinaction/ch3_hello_registry:latest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[REGISTRYHOST:PORT/][USERNAME/]NAME[:TAG]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;351-installing-images-using-dockerfile&quot;&gt;3.5.1 Installing Images using dockerfile&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/dockerinaction/ch3_dockerfile.git
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; dia_ch3/dockerfile:latest ch3_dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;36-backup--restore-docker-images&quot;&gt;3.6 Backup &amp;amp; Restore Docker Images&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker export&lt;/code&gt; turns container filesystem into tarball archive stream to STDOUT.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker import&lt;/code&gt; creates an image from a tarball.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker load&lt;/code&gt; loads an image from a tar archive as STDIN, including images and tags (as of 0.7).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker save&lt;/code&gt; saves an image to a tar archive stream to STDOUT with all parent layers, tags &amp;amp; versions (as of 0.7).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;361-comparison&quot;&gt;3.6.1 Comparison&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Docker &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; : Container To TAR
Docker Import : TAR to Image
Docker save   : Image To TAR
Docker load   : TAR to Image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;362-getting-practical&quot;&gt;3.6.2 Getting Practical&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker login/logout // get access to private repo on docker hub
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker save &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;image_name]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker save &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; myfile.tar image_name:latest // saves &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;current directory
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker load –i myfile.tar

&lt;span class=&quot;c&quot;&gt;# Load/Save image&lt;/span&gt;
- Load an image from file:
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker load &amp;lt; my_image.tar.gz

&lt;span class=&quot;c&quot;&gt;# Save an existing image:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker save my_image:my_tag | &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_image.tar.gz

&lt;span class=&quot;c&quot;&gt;# Import/Export container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Import a container as an image from file:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;my_container.tar.gz | docker import - my_image:my_tag

&lt;span class=&quot;c&quot;&gt;# Export an existing container:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;my_container | &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_container.tar.gz

&lt;span class=&quot;c&quot;&gt;# Difference between loading a saved image and importing an exported container as an image&lt;/span&gt;
Loading an image using the load &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;creates a new image including its history.
Importing a container as an image using the import &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;creates a new image excluding the &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;which results &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a smaller image size compared to loading an image.

&lt;span class=&quot;c&quot;&gt;# Save the State of Docker Image:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we can save the state of image by commiting ( like we do in source control )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker commit my_container
&lt;span class=&quot;c&quot;&gt;# Creates a new Image ID&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Restore State of Conatiner&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] New_Image_ID

&lt;span class=&quot;c&quot;&gt;# There is problem here. Docker Images ID's are 256Bit long, So there is no way to remember. what stuff we commit ( solution : is Tagging )&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Tag&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag ID_OF_IMAGE imagename
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run imagename &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; instead of 256Bit long ID &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We can also Reffer to a specific image in builds&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mention ID of Specific Build of Image ( like we did in previous steps ) and use it docker file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Remember : This is image is locally available ( docker is not looking this on Docker HUB )&lt;/span&gt;

FROM 8eaa4ff06b53

&lt;span class=&quot;c&quot;&gt;##  Walkthrough of Saving States&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install 2048 Game ( for this we need VNC viewer ( TigerVNC )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5901:5901 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6080:6080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; win2048 imiell/win2048
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vncviewer localhost:1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:1 If you have no X display on host &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# connect to port 5901 &amp;amp; default password for vnc viewer is 'vncpass'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Save a Game ( Commit Container )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker commit win2048 1&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;co14-1&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag ID 2048tag:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Return To the Save Game&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5901:5901 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6080:6080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; win2048 my2048tag:&lt;span class=&quot;nv&quot;&gt;$mytag&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;37-generating-dependency-graph-of-docker-image&quot;&gt;3.7 Generating Dependency graph of Docker Image&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# genrate a tree of dependecies of image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/docker-in-practice/docker-image-graph
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;docker-image-graph
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; dockerinpractice/docker-image-graph
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock dockerinpractice/docker-image-graph &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker_images.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;38-tricks-for-making-an-image-smaller&quot;&gt;3.8 Tricks for Making an Image Smaller&lt;/h3&gt;

&lt;h4 id=&quot;381-method-1--reduce-the-size-of-third-party-image&quot;&gt;3.8.1 Method 1 : Reduce the size of Third Party Image&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Step 1 : Remove Unnecessary file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 2 : Flatten the Image ( describe in this book )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 3 : Check Which Packages we dont need ( $ dpkg -l | awk '{print $2}'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 4 : Remove Packages ( apt-get purge -y package name )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 5 : Clean the cache ( apt-get autoremove, apt-get clean )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 6 : Remove all the man pages and other doc files :&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /usr/share/doc/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/share/man/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/share/info/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Step 7 : Clean the Temp data &amp;amp; logs in (/var)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find /var | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.log$'&lt;/span&gt; | xargs &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Step 8 : Commit The Image ( These Steps Creates a Much Smaller Image )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;382-method-2--tiny-docker-images-with-busybox-and-alpine&quot;&gt;3.8.2 Method 2 : Tiny Docker Images with BusyBox and Alpine&lt;/h4&gt;

&lt;p&gt;Small, usable OSs that can be embedded onto a low-power or cheap computer have existed since Linux began.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# BusyBox ( Weight of BusyBox 2.5 MB )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# BusyBox is so small ( so it can't uses the bash. It uses ash )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; busybox /bin/ash

&lt;span class=&quot;c&quot;&gt;# problem is that busybox don't uses any package manager : so for installing packages&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; progrium/busybox /bin/ash &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Size: 5 MB &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# its uses opkg package manager&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opkg-install bash &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; Size of contianer is 6 MB with Bash Shell &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; get ready to play with bash &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Alpine ( 36 MB )&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; Package Manager : APK
FROM gliderlabs/alpine:3.6
RUN apk-install mysql-client
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

list of packages : https://pkgs.alpinelinux.org/packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;383-method-3--the-go-model-of-minimal-containers&quot;&gt;3.8.3 Method 3 : The GO model of minimal containers&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# we can minimal Web server with go [ 5 MB Web Server ]&lt;/span&gt;
https://github.com/docker-in-practice/go-web-server

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; Dockerfile
FROM golang:1.4.2
RUN &lt;span class=&quot;nv&quot;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 go get &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ldflags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-s'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-installsuffix&lt;/span&gt; cgo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
github.com/docker-in-practice/go-web-server
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/go/bin/go-web-server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; go-webserver &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; go-web-server &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;go-web-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run go-webserver &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; go-web-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x go-web-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Hi &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; page.html

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM scratch
ADD go-web-server /go-web-server
ADD page.html /page.html
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/go-web-server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; go-web-server &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;go-web-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 go-web-server &lt;span class=&quot;nt&quot;&gt;-port&lt;/span&gt; 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Remember One Large image is much efficient than some small images : Because it saves space on your HDD and save network bandwidth also &amp;amp; Easy to maintainable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; : One Ubuntu Image with Node, Python, Nginx and other services ( around 1GB) (assigns only 1 IP)
Many small container are request internet ( so they consume bandwidth more &amp;amp; also they will consume more space than 1 GB )&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;40-storage-volumes&quot;&gt;4.0 Storage Volumes&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;41-day-to-day-volumes-command&quot;&gt;4.1 Day To Day Volumes Command&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume create&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume rm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume ls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume inspect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;42-types-of-volumes&quot;&gt;4.2 Types of Volumes&lt;/h3&gt;

&lt;p&gt;The three most common types of storage mounted into containers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bind mounts&lt;/li&gt;
  &lt;li&gt;In-memory storage&lt;/li&gt;
  &lt;li&gt;Docker volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;421-bind-mounts&quot;&gt;4.2.1 Bind Mounts&lt;/h4&gt;

&lt;p&gt;Bind mounts are mount points used to remount parts of a filesystem tree onto other locations. When working with containers, bind mounts attach a user-specified location on the host filesystem to a specific point in a container file tree.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONF_SRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/example.conf&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONF_DST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/nginx/conf.d/default.conf&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOG_SRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/example.log&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOG_DST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/nginx/custom.host.access.log&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; diaweb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONF_SRC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;,dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONF_DST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_SRC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;,dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_DST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
nginx:latest

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;422-in-memory-storage&quot;&gt;4.2.2 In-Memory Storage&lt;/h4&gt;

&lt;p&gt;Most service software and web applications use private key files, database passwords,
API key files, or other sensitive configuration files, and need upload buffering space.
In these cases, it is important that you never include those types of files in an image or
write them to disk. Instead, you should use in-memory storage. You can add in-memory
storage to containers with a special type of mount.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1777 permissions in octal&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# tmpfs-size=16k&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
memory-based filesystem into a containerdocker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tmpfs,dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp,tmpfs-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16k,tmpfs-mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1770 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--entrypoint&lt;/span&gt; mount &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
alpine:latest &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;423-docker-volumes&quot;&gt;4.2.3 Docker Volumes&lt;/h4&gt;

&lt;p&gt;Docker volumes are named filesystem trees managed by Docker. They can be implemented with disk storage on the host filesystem, or another more exotic backend such as cloud storage. All operations on Docker volumes can be accomplished using the docker volume subcommand set.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
docker volume create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--driver&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;location &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
location-example
docker volume inspect &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
location-example
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;43-moving-docker-to-a-different-partition&quot;&gt;4.3 Moving Docker to a different Partition&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Stop Docker Daemon ( service docker stop )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ $ &lt;/span&gt;dockerd &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; /home/dockeruser/mydocker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : This will wipe all the containers and images from your previous Docker daemon.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;44-access-filesystem-from-docker-container&quot;&gt;4.4 Access Filesystem from Docker Container&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This will mount /dotfiles folder to container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/hacstac/dotfiles:~/dotfiles &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; debian bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;45-share-volumes-across-the-internet&quot;&gt;4.5 Share Volumes Across the internet&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# In this we use a technology called Resilio&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example ( 2 Machines ) : Setup Resilio on both Machine - That synchronized a volume ( Connected through a Secret Key )&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Machine 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888:8888 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 55555:55555 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; resilio ctlc/btsync

&lt;span class=&quot;c&quot;&gt;# docker logs resilio Or ( Lazy ) -&amp;gt; Use Portainer ( Logs )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# copy secret key&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; resilio ubuntu /bin/bash
&lt;span class=&quot;c&quot;&gt;# create Data in ubuntu : touch /data/shared_from_server&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Machine 2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# setup resilio client&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; resilio-client &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8888:8888 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 55555:55555 ctlc/btsync key_of_server

&lt;span class=&quot;c&quot;&gt;# Setup ubuntu&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; resilio-client ubuntu /bin/bash
&lt;span class=&quot;c&quot;&gt;# our data folder is now available in this &amp;amp; if you create a file in here then it will synchronized to Machine 1 also.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;46-using-a-centralized-data-volumes-for-containers&quot;&gt;4.6 Using a Centralized Data Volumes For Containers&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create a volume with docker which store a data which you need in other docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /codebase &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; codebase busybox

&lt;span class=&quot;c&quot;&gt;# access the codebase&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; codebase ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;47-mounting-the-remote-file-systems&quot;&gt;4.7 Mounting the remote file systems&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This will need FUSE Kernel Module to be loaded on Host OS ( filesystem and userspace )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required Root Access ( Danger )&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 4.7.1. SSHFS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Local Host&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; debian /bin/bash
&lt;span class=&quot;c&quot;&gt;# Inside a Container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sshfs
&lt;span class=&quot;nv&quot;&gt;$ LOCALPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/directory/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOCALPATH&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sshfs &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; nonempty user@host:/path/to/directory &lt;span class=&quot;nv&quot;&gt;$LOCALPATH&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# to unmount fusermount -u /path/to/local/directory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now the remote folder is mount on LOCALPATH&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 4.7.2 NFS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install a NFS on host ( because docker doesn't support NFS )&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nfs-kernel-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /export
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;777 /export
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;--bind&lt;/span&gt; /opt/test/db /export

&lt;span class=&quot;c&quot;&gt;# add this to fstab ( if you want to persist over reboot )&lt;/span&gt;
/etc/fstab file: /opt/test/db /export none &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;0 0

&lt;span class=&quot;c&quot;&gt;# add this to /etc/exports&lt;/span&gt;
/export   127.0.0.1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ro,fsid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,insecure,no_subtree_check,async&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to Read/Write : change ro to rw &amp;amp; add no_root_squash (After async)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To open to the internet replace localhost to *&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; Danger : Think about it &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nfs 127.0.0.1:/export /mnt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exportfs &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service nfs-kernel-server restart

&lt;span class=&quot;c&quot;&gt;# Run a container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nfs-client &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /mnt:/mnt busybox /bin/true

&lt;span class=&quot;c&quot;&gt;# Mount on other container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; nfs-client debian /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;50-networks-in-docker&quot;&gt;5.0 Networks in Docker&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;51-day-to-day-network-commands&quot;&gt;5.1 Day To Day Network Commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network create&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network rm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network ls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network inspect&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network connect&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network disconnect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;52-examples&quot;&gt;5.2 Examples&lt;/h3&gt;

&lt;h4 id=&quot;521-to-list-all-networks&quot;&gt;5.2.1 To list all networks&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls

&lt;/span&gt;NETWORK ID          NAME                DRIVER              SCOPE
f32f6d51e8c8        bridge              bridge              &lt;span class=&quot;nb&quot;&gt;local
&lt;/span&gt;366d3d1f4719        hacstac_default     bridge              &lt;span class=&quot;nb&quot;&gt;local
&lt;/span&gt;6c08bddba2c4        host                host                &lt;span class=&quot;nb&quot;&gt;local
&lt;/span&gt;b726554d155b        none                null                &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;522-to-create-a-new-network&quot;&gt;5.2.2 To Create a New Network&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--driver&lt;/span&gt; bridge &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dockerinaction &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--attachable&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--scope&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; 10.0.42.0/24 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--ip-range&lt;/span&gt; 10.0.42.128/25 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  user-network

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; user-network &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; network-explorer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  alpine:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    sh

&lt;span class=&quot;c&quot;&gt;# CTRL-P + CTRL-Q Detech&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# docker attach network-explorer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# walkthrough&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create my_network &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Create a Network &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network connect my_network blog1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; blog1 container connect to a network my_network &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; my_network ubuntu:16.04 bash &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Now this ubuntu container have access to blog1 Container &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; inet &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; addr // this will list loopback and assign ip subnet address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;523-create-a-another-bridge-network&quot;&gt;5.2.3 Create a another bridge network&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--driver&lt;/span&gt; bridge &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--attachable&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--scope&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; 10.0.43.0/24 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--ip-range&lt;/span&gt; 10.0.43.128/25 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  user-network2


&lt;span class=&quot;c&quot;&gt;# Attach priviously created container attach to this network&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network connect &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  user-network2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  network-explorer

&lt;span class=&quot;c&quot;&gt;# then this container lists two ethernet addresses&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# scan with nmap&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sn&lt;/span&gt; 10.0.42.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sn&lt;/span&gt; 10.0.43.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oG&lt;/span&gt; /dev/stdout | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;524-with-network---none--means-container-with-no-external-excess&quot;&gt;5.2.4 With Network - none : Means container with no external excess&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    alpine:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ping &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 2 1.1.1.1
&lt;span class=&quot;c&quot;&gt;# it will try to ping 1.1.1.1 but it failed because this container hace no external network access&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# NodePort Publishing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 8080:8000 will denote 8080 port of host machine and 8000 port of container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; listener alpine:3.8
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker port listener // To view port of running container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;525-dns-with-docker&quot;&gt;5.2.5 DNS with docker&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Feature 1 : --hostname will add hostname : so we open with DN&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; barker &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    alpine:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    nslookup barker

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
Server:    10.0.2.3
Address 1: 10.0.2.3

Name:      barker
Address 1: 172.17.0.22 barker
&lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Feature 2 : --dns : set dns server on container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; 8.8.8.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    alpine:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    nslookup docker.com

&lt;span class=&quot;c&quot;&gt;# Feature 3 : --dns-search : allows us to specify a DNS searchdomain,  which  is  like  a  default  hostname  suffix&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--dns-search&lt;/span&gt; docker.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; 1.1.1.1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    alpine:3.8 &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/resolv.conf
&lt;span class=&quot;c&quot;&gt;# Will display contents that look like:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# search docker.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# nameserver 1.1.1.1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Feature 4 : --add-host&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; mycontainer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt; docker.com:127.0.0.1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:10.10.10.2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    alpine:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
172.17.0.45  mycontainer
127.0.0.1    localhost
::1          localhost ip6-localhost ip6-loopbackfe00
::0          ip6-localnetff00::0      ip6-mcastprefixff02
::1          ip6-allnodesff02::2      ip6-allrouters
10.10.10.2   &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;127.0.0.1   docker.com
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;526-you-can-specify-a-specific-ip-address-for-a-container&quot;&gt;5.2.6 You can specify a specific IP address for a container&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a new bridge network with your subnet and gateway for your ip block&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; 203.0.113.0/24 &lt;span class=&quot;nt&quot;&gt;--gateway&lt;/span&gt; 203.0.113.254 iptastic

&lt;span class=&quot;c&quot;&gt;# run a nginx container with a specific ip in that block&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; iptastic &lt;span class=&quot;nt&quot;&gt;--ip&lt;/span&gt; 203.0.113.2 nginx

&lt;span class=&quot;c&quot;&gt;# curl the ip from any other place (assuming this is a public ip block duh)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl 203.0.113.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;527-open-a-docker-daemon-to-the-world&quot;&gt;5.2.7 Open a Docker Daemon to the World&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# first of stop the docker service&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service docker stop / or
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl stop docker

&lt;span class=&quot;c&quot;&gt;# Checks for docker daemon ??&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker(d| -d| daemon)\b'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Expose to local host : 2375&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker daemon &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; tcp://0.0.0.0:2375

&lt;span class=&quot;c&quot;&gt;# To connect&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; tcp://&amp;lt;your host&lt;span class=&quot;s1&quot;&gt;'s ip&amp;gt;:2375 &amp;lt;subcommand&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;528-get-an-ip--ports-of-a-docker-container&quot;&gt;5.2.8 Get an IP &amp;amp; Ports of a Docker Container&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docker ps -l -q'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; latest container ID &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;dl&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-wm1&lt;/span&gt; IPAddress | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 4
Pass &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; ID of container Instead of dl &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : this above &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;gives ip of latest container

&lt;span class=&quot;c&quot;&gt;# get ports&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'  -&amp;gt;  '&lt;/span&gt; 274d2292a137 | name_of_container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;60-limiting-risk-with-resource-controls&quot;&gt;6.0 Limiting Risk with Resource Controls&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;61-memory-limits&quot;&gt;6.1 Memory Limits&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ch6_mariadb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 256m &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--cpu-shares&lt;/span&gt; 1024 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--cap-drop&lt;/span&gt; net_raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    mariadb:5.5

&lt;span class=&quot;c&quot;&gt;# This container only uses the 256M memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;62-cpu-limits&quot;&gt;6.2 CPU Limits&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ch6_wordpress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 512m &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--cpu-shares&lt;/span&gt; 512 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--cap-drop&lt;/span&gt; net_raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; ch6_mariadb:mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
wordpress:5.0.0-php7.2-apache
&lt;span class=&quot;c&quot;&gt;# if total cpu share is 1536 - 512 ( 33% ) : this container consume 33% of cpu shares&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ch6_wordpress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 512m &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--cpus&lt;/span&gt; 0.75 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--cap-drop&lt;/span&gt; net_raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; ch6_mariadb:mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
wordpress:5.0.0-php7.2-apache
&lt;span class=&quot;c&quot;&gt;# This Container : consumed max 75% of cpu cores&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# also we can use {--cpuset-cpus 0-4} (cores)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;63-access-to-devices&quot;&gt;6.3 Access to devices&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt; /dev/video0:/dev/video0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ubuntu:16.04 &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; /dev
&lt;span class=&quot;c&quot;&gt;# --device flag will mount external device to container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;64-sharing-memory--ipc--interprocess-communication-&quot;&gt;6.4 Sharing Memory ( IPC : Interprocess Communication )&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Producer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; nobody &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ch6_ipc_producer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ipc&lt;/span&gt; shareable &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    dockerinaction/ch6_ipc &lt;span class=&quot;nt&quot;&gt;-producer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Consumer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ch6_ipc_consumer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ipc&lt;/span&gt; container:ch6_ipc_producer &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    dockerinaction/ch6_ipc &lt;span class=&quot;nt&quot;&gt;-consumer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# we can see the process of one container in another : by using docker logs { they share the memory space }&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# IMP NOTE : In docker to clean Volumes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vf&lt;/span&gt; name_of_container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;65-understanding-users&quot;&gt;6.5 Understanding Users&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# if we want to setup a container with diff user then&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; nobody &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    busybox:1.29 &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; 1000:1000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    busybox:1.29 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo This is important info &amp;gt; /logFiles/important.log&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# with this userID:GroupID we can access the file system of this users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;66-os-features-access-with-capabilities&quot;&gt;6.6 OS features Access with Capabilities&lt;/h3&gt;

&lt;p&gt;Linux capabilities can be set by using cap-add and cap-drop. See &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities&quot;&gt;https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities&lt;/a&gt; for details. This should be used for greater security.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
SYS_MODULE —Insert/remove kernel modules
SYS_RAWIO — Modify kernel memory
SYS_NICE — Modify priority of processes
SYS_RESOURCE — Override resource limits
SYS_TIME — Modify the system clock
AUDIT_CONTROL — Configure audit subsystem
MAC_ADMIN — Configure MAC configuration
SYSLOG — Modify kernel print behavior
NET_ADMIN — Configure the network
SYS_ADMIN — Catchall &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;administrative functions
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; nobody &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--cap-add&lt;/span&gt; sys_admin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ubuntu:16.04 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capsh --print | grep sys_admin&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# this --cap-add sys_admin will add admin facilities to container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we can inspect docker with .HostConfig.CapAdd &amp;amp;&amp;amp; .HostConfig.CapDrop show capabilities&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Give access to a single device:&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/ttyUSB0 debian bash

&lt;span class=&quot;c&quot;&gt;# Give access to all devices:&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/bus/usb:/dev/bus/usb debian bash

&lt;span class=&quot;c&quot;&gt;# Docker Container with full privileges&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ubuntu:16.04 capsh &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /dev
&lt;span class=&quot;c&quot;&gt;# check out list of mounted devices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;67-additional-security-with-docker&quot;&gt;6.7 Additional Security with Docker&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--security-opt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seccomp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;path_to_the_secomp conf file &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ubuntu:16.04 sh

&lt;span class=&quot;c&quot;&gt;# For Linux Security Modules ( LSM )&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
The LSM security option values are specified &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;one of seven formats:

- To prevent a container from gaining new privileges after it starts, use
&lt;span class=&quot;s1&quot;&gt;'no-new-privileges'&lt;/span&gt;

- To  &lt;span class=&quot;nb&quot;&gt;set  &lt;/span&gt;a  SELinux  user  label,  use  the  form
&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user:username, where is the name of the user you want to use &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the label.

- To &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a SELinux role label, use the form  &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;role:role where is the name of the role you want to apply to processes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the container.

- To &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a SELinux &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;label, use the form &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;:type , where is the &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;name of the processes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the container.
- To &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a SELinux-level label, use the form &lt;span class=&quot;s1&quot;&gt;'label:level:label'&lt;/span&gt; , where is the level at which processes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the container should run. Levels are specified as  low-high  pairs.  Where  abbreviated  to  the  low  level  only,  SELinux  will  inter-pret the range as single level.

- To disable SELinux label confinement &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a container, use the form
&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disable

&lt;span class=&quot;c&quot;&gt;# NOTE : Avoid Running Containers in privileged mode whenever possible&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;68-using-socat-to-monitor-docker-api-traffic&quot;&gt;6.8 Using Socat to monitor docker api traffic&lt;/h3&gt;

&lt;p&gt;In this technique you’ll insert a proxy Unix domain socket between your request and the server’s socket to see what passes through it. Note that you’ll need root or sudo privileges to make this work.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# We need a socat ( Install socat as per the OS package Maneger )&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;socat &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; UNIX-LISTEN:/tmp/dockerapi.sock,fork &lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;NIX-CONNECT:/var/run/docker.sock &amp;amp;

In this &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; makes the output readable, with indications of the flow of data.The UNIX-LISTEN part tells socat to listen on a Unix socket, fork ensures that socatdoesn’t  &lt;span class=&quot;nb&quot;&gt;exit  &lt;/span&gt;after  the  first  request,  and  UNIX-CONNECT  tells  socat  to  connect  toDocker’s  Unix  socket.  The  &amp;amp;  specifies  that  the  &lt;span class=&quot;nb&quot;&gt;command  &lt;/span&gt;runs  &lt;span class=&quot;k&quot;&gt;in  &lt;/span&gt;the  background.If you usually run the Docker client with &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt;, you’ll need to &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;the same thing here as well.

&lt;span class=&quot;c&quot;&gt;# List all containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; unix:///tmp/dockerapi.sock ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This will show how client request to daemon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;69-setting-timezone-in-containers&quot;&gt;6.9 Setting TimeZone in Containers&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Runs a command to display the time zone on the host&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Z // UTC

&lt;span class=&quot;c&quot;&gt;# change TimeZone&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM centos:7
RUN &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/localtime
RUN &lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
CMD &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Z
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build Image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; timezone_change &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run timezone_change
Asia/Kolkata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;610-locale-management&quot;&gt;6.10 Locale Management&lt;/h3&gt;

&lt;p&gt;locale will be set in the environment through the LANG,LANGUAGE, and locale-gen variables&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# you are getting encoding error if correct locale is not set.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check for locale&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;LANG
&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_GB.UTF-8
This is British English, with text encoded &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;UTF-8.

&lt;span class=&quot;c&quot;&gt;# Set Locale&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
FROM ubuntu:16.04
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; locales
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
CMD &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ $ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; encoding &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="markdown" /><summary type="html">1.0 What is a Docker</summary></entry></feed>